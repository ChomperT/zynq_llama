


`timescale 1 ns/1 ps
`default_nettype none
(* DowngradeIPIdentifiedWarnings="yes" *)


module bd_4503_tsn_endpoint_block_0_0_tsn_endpoint_ethernet_mac_block_v1_0_14
 # (

   parameter        EP_SWITCH                       = 0,
   parameter        C_1588                          = 1,
   parameter        STORE_AND_FORWARD               = 7,
   parameter        SYNTONIZED_TIMESTAMPS           = 0,
   parameter        EN_FRAME_PREEMPTION_SUPPORT     = 0,           // 1 -> Qbu + br suppport 
   parameter        EN_FRAME_PREEMPTION_SUPPORT_MAC_2     = 0,           // 1 -> Qbu + br suppport 
   parameter        EN_QBV_SCHEDULING_SUPPORT       = 1,           //  Qbv Scheduler 
   parameter        NUM_PORTS                       = 3,
   parameter        NUM_PORTS_RI                    = 0,
   parameter        NUM_PORTS_V                     = 1,
   parameter        ST_MAX_FRM_SIZE_SUPPORTED       = 2000,
   parameter        RES_MAX_FRM_SIZE_SUPPORTED      = 2000,
   parameter        BE_MAX_FRM_SIZE_SUPPORTED       = 2000,
   parameter        EN_TX_CUSTOM_TIMESTAMP          = 0,
   parameter        EN_RX_CUSTOM_TIMESTAMP          = 0,
   parameter        PTP_BRAM_PARTITION_SIZE         = 256,         // 256 bytes (512, 1024, 2048)
   parameter        NUM_PTP_RX_MSG                  = 16,          // 16 fixed for 256B; 8 fixed for 512; 4,8 for 1024; 2,4,8 for 2048 
   parameter        EN_1588_PTP_V1_SUPPORT          = 0,
   parameter        PTP_V1_BRAM_PARTITION_SIZE         = 256,         // 256 bytes (512, 1024, 2048)
   parameter        EN_SWITCH_CASCADE               = 0,
   parameter        EN_EP_PKT_SWITCH                = 0,
   parameter        USE_ULTRA_RAM                   = 0,
   parameter        ENABLE_EP_TADMA_INTERFACE       = 0,
   parameter        DEBUG_HOOKS                     = 0,
   parameter        NUM_PRIORITIES                  = 3,
   parameter        VERSION_INFO                    = 0,
   parameter        TSN_IPI_STREAM_CONNECT          = "NA",
   parameter        C_FAMILY                        = "Zynq"        // Device family 
 )
 (

//Switch Signals
      output wire                      gtx_clk_reset_reg,
      output wire [79:0]               ptp_current_time_sw,

      output wire [NUM_PORTS-1:0]      mac_rx_clk, 
      output wire [NUM_PORTS-1:0] [7:0]  m_axis_rx_tdata,
      output wire [NUM_PORTS-1:0] [0:0]  m_axis_rx_tkeep,
      output wire [NUM_PORTS-1:0]        m_axis_rx_tvalid,
      output wire [NUM_PORTS-1:0]        m_axis_rx_tuser,
      output wire [NUM_PORTS-1:0]        m_axis_rx_tlast,
      output wire [NUM_PORTS-1:0][1:0]   m_axis_rx_ctl, 

      output wire [NUM_PORTS-1:0]        mac_tx_clk, 
      input  wire [NUM_PORTS-2:0] [31:0] s_axis_tx_tdata,
      input  wire [NUM_PORTS-2:0] [3:0]  s_axis_tx_tkeep,
      input  wire [NUM_PORTS-2:0]        s_axis_tx_tvalid,
      input  wire [NUM_PORTS-2:0]        s_axis_tx_tlast,
      input  wire [NUM_PORTS-2:0] [3:0]  s_axis_tx_tuser,    
      output wire [NUM_PORTS-2:0]        s_axis_tx_tready,

      input  wire [NUM_PRIORITIES-1:0] [31:0]     s_axis_tx_tdata_ep,
      input  wire [NUM_PRIORITIES-1:0] [3:0]      s_axis_tx_tkeep_ep,
      input  wire [NUM_PRIORITIES-1:0]            s_axis_tx_tvalid_ep,
      input  wire [NUM_PRIORITIES-1:0]            s_axis_tx_tlast_ep,
      input  wire [NUM_PRIORITIES-1:0] [31:0]     s_axis_tx_tuser_ep,
      input  wire [NUM_PRIORITIES-1:0] [2:0]      s_axis_tx_tdest_ep,
      output wire [NUM_PRIORITIES-1:0]            s_axis_tx_tready_ep,

      input  wire [NUM_PORTS-1:0][7:0]     s_axis_emac_tx_tdata,
      input  wire [NUM_PORTS-1:0]          s_axis_emac_tx_tvalid,
      input  wire [NUM_PORTS-1:0]          s_axis_emac_tx_tlast,
      input  wire [NUM_PORTS-1:0]          s_axis_emac_tx_tuser,    
      output wire [NUM_PORTS-1:0]          s_axis_emac_tx_tready,

      input  wire  [31:0]                  switch_pfc_register_in,

   // PS from switch
      input  wire  [31:0]     s_axis_tx_tdata_ps,
      input  wire  [3:0]      s_axis_tx_tkeep_ps,
      input  wire             s_axis_tx_tvalid_ps,
      input  wire             s_axis_tx_tlast_ps,
      input  wire  [31:0]     s_axis_tx_tuser_ps,
      input  wire  [2:0]      s_axis_tx_tdest_ps,
      output wire             s_axis_tx_tready_ps,
  //PS host rx 
      output wire  [31:0]      ps_rx_axis_host_tdata,
      output wire  [3:0]       ps_rx_axis_host_tkeep,
      output wire              ps_rx_axis_host_tvalid,
      input  wire              ps_rx_axis_host_tready,
      output wire              ps_rx_axis_host_tlast,
      output wire [2:0]        ps_rx_axis_host_tdest,
      output wire [31:0]       ps_rx_axis_host_tuser,
  
      output wire          bus2ip_clk,
      output wire         bus2ip_reset,
      output wire [17:0]  bus2ip_addr,  
      output wire [31:0]  bus2ip_data,
      output wire         bus2ip_rdce,
      output wire         bus2ip_wrce,
      output wire         bus2ip_cs_mac1,  
      input  wire         ip2bus_rdack_mac1, 
      input  wire         ip2bus_wrack_mac1,
      input  wire         ip2bus_error_mac1,
      input  wire [31:0]  ip2bus_data_mac1,
      output wire         bus2ip_cs_mac2,  
      input  wire         ip2bus_rdack_mac2, 
      input  wire         ip2bus_wrack_mac2,
      input  wire         ip2bus_error_mac2,
      input  wire [31:0]  ip2bus_data_mac2,

      output wire          int_mgmt_host_reset_out_reg_n_switch,
      output wire          s_axi_switch_rready,
      output wire          s_axi_switch_bready,
      output wire          s_axi_switch_arvalid,
      output wire          s_axi_switch_awvalid,
      output wire          s_axi_switch_wvalid,
      output wire [2:0]    s_axi_switch_arprot,
      output wire [2:0]    s_axi_switch_awprot,
      output wire [31:0]   s_axi_switch_araddr_sw,
      output wire [31:0]   s_axi_switch_awaddr_sw,
      output wire [3:0]    s_axi_switch_wstrb,
      output wire [31:0]   s_axi_switch_wdata,
      input  wire          s_axi_switch_arready,
      input  wire          s_axi_switch_awready,
      input  wire          s_axi_switch_wready,
      input  wire          s_axi_switch_rvalid,
      input  wire          s_axi_switch_bvalid,
      input  wire [1:0]    s_axi_switch_bresp,
      input  wire [1:0]    s_axi_switch_rresp,
      input  wire [31:0]   s_axi_switch_rdata,

      output wire [NUM_PORTS-1:0] [7:0]   switch_current_gate_states_out_i2,
      input  wire [NUM_PORTS-1:0]         switch_requesting_queue_valid,
      input  wire [NUM_PORTS-1:0] [7:0]   switch_requesting_queue,
      output wire [NUM_PORTS-1:0] [7:0]   switch_gate_masks_out_i,
      output wire [NUM_PORTS-1:0]         switch_guard_band_nack,
      output wire [NUM_PORTS-1:0]         switch_guard_band_ack,
      input  wire [NUM_PORTS-1:0] [7:0]   switch_gate_queue_status,                    
      input  wire [NUM_PORTS-1:0] [7:0]   transmission_overrun_count_incr,
      input  wire [NUM_PORTS-1:0] [7:0]   mactx_gate_qactive,
      input  wire [NUM_PRIORITIES-1:0] [15:0]   switch_max_frame_size, 
      input  wire [NUM_PORTS-1:0]      [15:0]   switch_mactx_frame_len,

      output wire [NUM_PORTS-1:0]          e_current_gate_states_out_i,
      output wire [NUM_PORTS-1:0]          e_gate_masks_out,
      input  wire [NUM_PORTS-1:0]          e_requesting_queue,
      input  wire [NUM_PORTS-1:0]          e_mactx_gate_qactive,
      input  wire [NUM_PORTS-1:0]          e_requesting_queue_valid,
      output wire [NUM_PORTS-1:0]          e_guard_band_nack,
      output wire [NUM_PORTS-1:0]          e_guard_band_ack,
      input  wire [NUM_PORTS-1:0]          e_transmission_overrun_count_incr,
      input  wire [NUM_PORTS-1:0] [15:0]   e_switch_mactx_frame_len,
      input  wire [NUM_PORTS-1:0]          e_switch_gate_queue_status,

      output wire [NUM_PORTS-1:0] [7:0]  macrx_pfc,
      input  wire [NUM_PORTS-1:0] [7:0]  mactx_pfc,

// Temac Signals

      output wire       [NUM_PORTS-1:1]  [7:0]   tx_axis_pmac_tdata, 
      output wire       [NUM_PORTS-1:1]          tx_axis_pmac_tvalid, 
      output wire       [NUM_PORTS-1:1]          tx_axis_pmac_tlast, 
      input  wire       [NUM_PORTS-1:1]          tx_axis_pmac_tready, 
      output wire       [NUM_PORTS-1:1]          tx_axis_pmac_tuser, 

      input  wire         [NUM_PORTS-1:1]    [7:0] rx_axis_pmac_tdata,
      input  wire         [NUM_PORTS-1:1]          rx_axis_pmac_tvalid,
      input  wire         [NUM_PORTS-1:1]          rx_axis_pmac_tlast,
      input  wire         [NUM_PORTS-1:1]          rx_axis_pmac_tuser,

      output wire          [NUM_PORTS-1:1]          core_hold_disabled_override_pmac, 
      output wire          [NUM_PORTS-1:1]          hold_request_pmac, 

      input  wire   [NUM_PORTS-1:1]       rx_mac_reset,
      input  wire   [NUM_PORTS-1:1]       tx_mac_reset,
      input wire    [NUM_PORTS-1:1]      rx_enable_in                         ,
      input wire    [NUM_PORTS-1:1]      rx_mac_aclk_in                       ,
      input wire    [NUM_PORTS-1:1]      tx_enable_in                         ,
      input wire    [NUM_PORTS-1:1]      tx_mac_aclk_in                       ,
      input wire                 [511:0] mac_debug_in                         ,
      input wire    [NUM_PORTS-1:1]      speedis100_in                        ,                       

      input wire        [NUM_PORTS-1:1] [7:0]  rx_axis_mac_tdata,
      input wire        [NUM_PORTS-1:1]        rx_axis_mac_tvalid,
      input wire        [NUM_PORTS-1:1]        rx_axis_mac_tlast,
      input wire        [NUM_PORTS-1:1]        rx_axis_mac_tuser,

      input  wire       [NUM_PORTS-1:1]  tx_ptp_frame_available,                    
      input  wire       [NUM_PORTS-1:1]  tx_ptp_frame_granted_for_transmission,                    
      input  wire       [NUM_PORTS-1:1]  [31:0] tx_scheduler_internal_overhead_tsn,                   

      output wire         [NUM_PORTS-1:1] [7:0]   tx_axis_mac_tdata, 
      output wire         [NUM_PORTS-1:1]         tx_axis_mac_tvalid, 
      output wire         [NUM_PORTS-1:1]         tx_axis_mac_tlast, 
      input  wire         [NUM_PORTS-1:1]         tx_axis_mac_tready, 
      output wire         [NUM_PORTS-1:1]         tx_axis_mac_tuser, 

      input  wire [NUM_PORTS-1:1]  [511:0] preemption_signal_vector,


      output wire          [NUM_PORTS-1:1] [15:0]   switch_be_pkt_byte_count_sw,
      input  wire          int_mgmt_host_reset_out,
      output wire       [NUM_PORTS-1:1]  tx_ptp_frame_allowed,                  

// Outputs Coming from Ouside Temac
      input wire          rx_axis_pmac_st_filter_tuser         ,  
      input wire          rx_axis_pmac_av_filter_tuser         ,  
      input wire          rx_axis_st_filter_tuser              ,
      input wire          rx_axis_av_filter_tuser              ,
      input  wire        [31:0]  mac_1_debug_out,
      input  wire        [31:0]  mac_2_debug_out,

//TSN EP
      output wire [63:0]       ep_tadma_if_out,
      input  wire [63:0]       ep_tadma_if_in,

      input  wire              gtx_clk,
      input  wire              refclk,
      input  wire              glbl_rstn,
      input  wire              rx_axi_rstn,  //What should be reset by this. Only TEMACs?? or Switch also?? With switch tx & rx notion changes so not providing until clear. 
      input  wire              tx_axi_rstn,
      output wire              [NUM_PORTS-1:1]         rx_enable,
      output wire              [NUM_PORTS-1:1]         rx_mac_aclk,
      output wire              [NUM_PORTS-1:1]         rx_reset,
      output wire              [NUM_PORTS-1:1]         tx_mac_aclk,
      output wire              [NUM_PORTS-1:1]         tx_reset,

      output wire [31:0]       rtc_nanosec_field,
      output wire [47:0]       rtc_sec_field,
      output wire [31:0]       syntonised_nanosec_field,
      output wire [47:0]       syntonised_sec_field,
      input  wire [31:0]       rtc_nanosec_field_in,
      input  wire [47:0]       rtc_sec_field_in,
      input  wire [31:0]       syntonised_nanosec_field_in,
      input  wire [47:0]       syntonised_sec_field_in,
      input  wire              clk8k_in,
      input  wire    [31:0]    rtc_nanosec_field_1722_in,

      output wire              clk8k,
      output wire    [31:0]    rtc_nanosec_field_1722,
      output wire    [511:0]   tsn_debug_hooks,
      input  wire              gtx_clk90,
      output wire              gtx_clk90_out,

      output wire              [NUM_PORTS-1:1]         tx_enable,
      output wire              [NUM_PORTS-1:1]         speedis100,


      output wire                                        interrupt_ptp_rx_1,
      output wire                                        interrupt_ptp_rx_2,
      output wire                                        interrupt_ptp_tx_1,
      output wire                                        interrupt_ptp_tx_2,
      output wire                                        interrupt_ptp_v1_rx_1,
      output wire                                        interrupt_ptp_v1_rx_2,
      output wire                                        interrupt_ptp_v1_tx_1,
      output wire                                        interrupt_ptp_v1_tx_2,

  input wire      [NUM_PORTS-1:1]         interrupt_ptp_rx,
  input wire      [NUM_PORTS-1:1]         interrupt_ptp_tx,
  input wire      [NUM_PORTS-1:1]         interrupt_ptp_v1_rx,
  input wire      [NUM_PORTS-1:1]         interrupt_ptp_v1_tx,
  input wire      [NUM_PORTS-1:1]         mac_irq,


//s_axi intf
      input wire               s_axi_aclk,
      input wire               s_axi_aresetn,
      input wire  [17:0]       s_axi_awaddr, 
      input wire  [17:0]       s_axi_araddr, 
      input wire               s_axi_awvalid,   
      output wire              s_axi_awready,    
      input wire  [31:0]       s_axi_wdata, 
      input wire               s_axi_wvalid, 
      output wire              s_axi_wready, 
      output wire [1:0]        s_axi_bresp, 
      output wire              s_axi_bvalid,   
      input wire               s_axi_bready, 
      input wire               s_axi_arvalid, 
      output wire              s_axi_arready, 
      output wire [31:0]       s_axi_rdata, 
      output wire [1:0]        s_axi_rresp, 
      output wire              s_axi_rvalid, 
      input wire               s_axi_rready, 


      input  wire              host_txfifo_aclk,
      input  wire              host_rxfifo_aclk,


  //ST host rx & tx
      output wire  [31:0]      st_rx_axis_host_tdata,
      output wire  [3:0]       st_rx_axis_host_tkeep,
      output wire              st_rx_axis_host_tvalid,
      input  wire              st_rx_axis_host_tready,
      output wire              st_rx_axis_host_tlast,
      output wire [2:0]        st_rx_axis_host_tdest,
      output wire [31:0]       st_rx_axis_host_tuser,
  
      input  wire  [31:0]      st_tx_axis_host_tdata,
      input  wire  [3:0]       st_tx_axis_host_tkeep,
      input  wire              st_tx_axis_host_tvalid,
      output wire              st_tx_axis_host_tready,
      input  wire              st_tx_axis_host_tlast,
  
  
  //Res host rx & tx
      output wire  [31:0]      res_rx_axis_host_tdata,
      output wire  [3:0]       res_rx_axis_host_tkeep,
      output wire              res_rx_axis_host_tvalid,
      input  wire              res_rx_axis_host_tready,
      output wire              res_rx_axis_host_tlast,
      output wire [2:0]        res_rx_axis_host_tdest,
      output wire [31:0]       res_rx_axis_host_tuser,
  
      input  wire  [31:0]      res_tx_axis_host_tdata,
      input  wire  [3:0]       res_tx_axis_host_tkeep,
      input  wire              res_tx_axis_host_tvalid,
      output wire              res_tx_axis_host_tready,
      input  wire              res_tx_axis_host_tlast,
//   //==========================================================================
//  // cascade pins
//  //==========================================================================
//      input    wire          frame_cscd_vld_in,
//      input    wire [1:0]    frame_cscd_cmd_type_in,
//      input    wire [1:0]    frame_cscd_port_id_in,
//      input    wire [47:0]   frame_cscd_smac_addr_in,
//      input    wire [11:0]   frame_cscd_vlan_id_in,
//      output   wire          frame_cscd_buff_status_out,
//      output   wire          frame_cscd_vld_out,
//      output   wire [1:0]    frame_cscd_cmd_type_out,
//      output   wire [1:0]    frame_cscd_port_id_out,
//      output   wire [47:0]   frame_cscd_smac_addr_out,
//      output   wire [11:0]   frame_cscd_vlan_id_out,
//      input    wire          frame_cscd_buff_status_in,
//
//      // AXI stream Tx
//      input wire [31:0]      st_tx_tdata_cscd,
//      input wire [3:0]       st_tx_tkeep_cscd,
//      input wire             st_tx_tvalid_cscd,
//      input wire             st_tx_tlast_cscd,
//      input wire [1:0]       st_tx_tdest_cscd,
//      input wire [31:0]      st_tx_tuser_cscd,
//      output wire            st_tx_tready_cscd,
//      input wire [31:0]      res_tx_tdata_cscd,
//      input wire [3:0]       res_tx_tkeep_cscd,
//      input wire             res_tx_tvalid_cscd,
//      input wire             res_tx_tlast_cscd,
//      input wire [1:0]       res_tx_tdest_cscd,
//      input wire [31:0]      res_tx_tuser_cscd,
//      output wire            res_tx_tready_cscd,
//      input wire [31:0]      be_tx_tdata_cscd,
//      input wire [3:0]       be_tx_tkeep_cscd,
//      input wire             be_tx_tvalid_cscd,
//      input wire             be_tx_tlast_cscd,
//      input wire [1:0]       be_tx_tdest_cscd,
//      input wire [31:0]      be_tx_tuser_cscd,
//      output wire            be_tx_tready_cscd,
//
//      // AXI stream Rx
//      output wire [31:0]     st_rx_tdata_cscd,
//      output wire [3:0]      st_rx_tkeep_cscd,
//      output wire            st_rx_tvalid_cscd,
//      output wire            st_rx_tlast_cscd,
//      output wire [1:0]      st_rx_tdest_cscd,
//      output wire [31:0]     st_rx_tuser_cscd,
//      input wire             st_rx_tready_cscd,
//      output wire [31:0]     res_rx_tdata_cscd,
//      output wire [3:0]      res_rx_tkeep_cscd,
//      output wire            res_rx_tvalid_cscd,
//      output wire            res_rx_tlast_cscd,
//      output wire [1:0]      res_rx_tdest_cscd,
//      output wire [31:0]     res_rx_tuser_cscd,
//      input wire             res_rx_tready_cscd,
//      output wire [31:0]     be_rx_tdata_cscd,
//      output wire [3:0]      be_rx_tkeep_cscd,
//      output wire            be_rx_tvalid_cscd,
//      output wire            be_rx_tlast_cscd,
//      output wire [1:0]      be_rx_tdest_cscd,
//      output wire [31:0]     be_rx_tuser_cscd,
//      input wire             be_rx_tready_cscd,
      
  //BE host rx & tx
      output wire  [31:0]      be_rx_axis_host_tdata,
      output wire  [3:0]       be_rx_axis_host_tkeep,
      output wire              be_rx_axis_host_tvalid,
      input  wire              be_rx_axis_host_tready,
      output wire              be_rx_axis_host_tlast,
      output wire [2:0]        be_rx_axis_host_tdest,
      output wire [31:0]       be_rx_axis_host_tuser,
  
      input  wire  [31:0]      be_tx_axis_host_tdata,
      input  wire  [3:0]       be_tx_axis_host_tkeep,
      input  wire              be_tx_axis_host_tvalid,
      output wire              be_tx_axis_host_tready,
      input  wire              be_tx_axis_host_tlast,

      output wire              switch_cam_init_done,     // initialization done
      output wire         ptp_traffic_allowed_reg          ,
      output wire  [10:0] txd_byte_count_pmac              ,  

      output wire                                      mac_irq_1,
      output wire                                      mac_irq_2,
      output wire                                      tsn_switch_scheduler_irq_1,
      output wire                                      tsn_switch_scheduler_irq_2,
      input  wire              clk_enable,
      input  wire              rx_usr_clk2,
      input  wire              clk_enable_rx,
      output wire              tsn_ep_scheduler_irq



     ); 


  wire              [NUM_PORTS-1:1]         tsn_switch_scheduler_irq;

  assign interrupt_ptp_rx_1               = interrupt_ptp_rx[1];
  assign interrupt_ptp_rx_2               = interrupt_ptp_rx[2];
  assign interrupt_ptp_tx_1               = interrupt_ptp_tx[1];
  assign interrupt_ptp_tx_2               = interrupt_ptp_tx[2];
  assign mac_irq_1                        = mac_irq[1];
  assign mac_irq_2                        = mac_irq[2];
  assign tsn_switch_scheduler_irq_1       = tsn_switch_scheduler_irq[1];
  assign tsn_switch_scheduler_irq_2       = tsn_switch_scheduler_irq[2];



bd_4503_tsn_endpoint_block_0_0_TSN_TOP_WRAPPER_EP_SWITCH 
#(
//.OVERHEAD_MARGIN_EP(5'd 31),
//.OVERHEAD_MARGIN_EPSWITCH(5'd 31),
.C_1588(C_1588),
.EN_FRAME_PREEMPTION_SUPPORT(EN_FRAME_PREEMPTION_SUPPORT),
.EN_FRAME_PREEMPTION_SUPPORT_MAC_2(EN_FRAME_PREEMPTION_SUPPORT_MAC_2),
.EN_QBV_SCHEDULING_SUPPORT(EN_QBV_SCHEDULING_SUPPORT),
.SYNTONIZED_TIMESTAMPS(SYNTONIZED_TIMESTAMPS),
.STORE_AND_FORWARD(STORE_AND_FORWARD),
.NUM_PORTS(NUM_PORTS),
.ST_MAX_FRM_SIZE_SUPPORTED(ST_MAX_FRM_SIZE_SUPPORTED),
.RES_MAX_FRM_SIZE_SUPPORTED(RES_MAX_FRM_SIZE_SUPPORTED),
.BE_MAX_FRM_SIZE_SUPPORTED (BE_MAX_FRM_SIZE_SUPPORTED), 
.DEBUG_HOOKS(DEBUG_HOOKS), 
.NUM_PRIORITIES(NUM_PRIORITIES), 
.ENABLE_EP_TADMA_INTERFACE(ENABLE_EP_TADMA_INTERFACE),
.PTP_BRAM_PARTITION_SIZE(PTP_BRAM_PARTITION_SIZE),
.NUM_PTP_RX_MSG(NUM_PTP_RX_MSG),
.EN_1588_PTP_V1_SUPPORT(EN_1588_PTP_V1_SUPPORT),
.PTP_V1_BRAM_PARTITION_SIZE(PTP_V1_BRAM_PARTITION_SIZE),
.EN_TX_CUSTOM_TIMESTAMP(EN_TX_CUSTOM_TIMESTAMP),
.EN_RX_CUSTOM_TIMESTAMP(EN_RX_CUSTOM_TIMESTAMP),
  .EN_SWITCH_CASCADE (EN_SWITCH_CASCADE),
.C_FAMILY(C_FAMILY)
)
TSN_TOP
(
.ep_tadma_if_out(ep_tadma_if_out),
.ep_tadma_if_in (ep_tadma_if_in),
.gtx_clk  (gtx_clk),
.refclk  (refclk),
.glbl_rstn  (glbl_rstn),
.rx_enable  (rx_enable),
.tx_enable  (tx_enable),
.tx_reset  (tx_reset),
.rx_mac_aclk  (rx_mac_aclk),
.rx_reset  (rx_reset),
.tx_mac_aclk  (tx_mac_aclk),
.tsn_debug_hooks  (tsn_debug_hooks),
//.frame_cscd_vld_in                           (frame_cscd_vld_in),
//.frame_cscd_cmd_type_in                      (frame_cscd_cmd_type_in),
//.frame_cscd_port_id_in                       (frame_cscd_port_id_in),
//.frame_cscd_smac_addr_in                     (frame_cscd_smac_addr_in),
//.frame_cscd_vlan_id_in                       (frame_cscd_vlan_id_in),
//.frame_cscd_buff_status_out                  (frame_cscd_buff_status_out),
//.frame_cscd_vld_out                          (frame_cscd_vld_out),
//.frame_cscd_cmd_type_out                     (frame_cscd_cmd_type_out),
//.frame_cscd_port_id_out                      (frame_cscd_port_id_out),
//.frame_cscd_smac_addr_out                    (frame_cscd_smac_addr_out),
//.frame_cscd_vlan_id_out                      (frame_cscd_vlan_id_out),
//.frame_cscd_buff_status_in                   (frame_cscd_buff_status_in),
//.st_tx_tdata_cscd                            (st_tx_tdata_cscd),
//.st_tx_tkeep_cscd                            (st_tx_tkeep_cscd),
//.st_tx_tvalid_cscd                           (st_tx_tvalid_cscd),
//.st_tx_tlast_cscd                            (st_tx_tlast_cscd),
//.st_tx_tdest_cscd                            (st_tx_tdest_cscd),
//.st_tx_tuser_cscd                            (st_tx_tuser_cscd),
//.st_tx_tready_cscd                           (st_tx_tready_cscd),
//.res_tx_tdata_cscd                           (res_tx_tdata_cscd),
//.res_tx_tkeep_cscd                           (res_tx_tkeep_cscd),
//.res_tx_tvalid_cscd                          (res_tx_tvalid_cscd),
//.res_tx_tlast_cscd                           (res_tx_tlast_cscd),
//.res_tx_tdest_cscd                           (res_tx_tdest_cscd),
//.res_tx_tuser_cscd                           (res_tx_tuser_cscd),
//.res_tx_tready_cscd                          (res_tx_tready_cscd),
//.be_tx_tdata_cscd                            (be_tx_tdata_cscd),
//.be_tx_tkeep_cscd                            (be_tx_tkeep_cscd),
//.be_tx_tvalid_cscd                           (be_tx_tvalid_cscd),
//.be_tx_tlast_cscd                            (be_tx_tlast_cscd),
//.be_tx_tdest_cscd                            (be_tx_tdest_cscd),
//.be_tx_tuser_cscd                            (be_tx_tuser_cscd),
//.be_tx_tready_cscd                           (be_tx_tready_cscd),
//.st_rx_tdata_cscd                            (st_rx_tdata_cscd),
//.st_rx_tkeep_cscd                            (st_rx_tkeep_cscd),
//.st_rx_tvalid_cscd                           (st_rx_tvalid_cscd),
//.st_rx_tlast_cscd                            (st_rx_tlast_cscd),
//.st_rx_tdest_cscd                            (st_rx_tdest_cscd),
//.st_rx_tuser_cscd                            (st_rx_tuser_cscd),
//.st_rx_tready_cscd                           (st_rx_tready_cscd),
//.res_rx_tdata_cscd                           (res_rx_tdata_cscd),
//.res_rx_tkeep_cscd                           (res_rx_tkeep_cscd),
//.res_rx_tvalid_cscd                          (res_rx_tvalid_cscd),
//.res_rx_tlast_cscd                           (res_rx_tlast_cscd),
//.res_rx_tdest_cscd                           (res_rx_tdest_cscd),
//.res_rx_tuser_cscd                           (res_rx_tuser_cscd),
//.res_rx_tready_cscd                          (res_rx_tready_cscd),
//.be_rx_tdata_cscd                            (be_rx_tdata_cscd),
//.be_rx_tkeep_cscd                            (be_rx_tkeep_cscd),
//.be_rx_tvalid_cscd                           (be_rx_tvalid_cscd),
//.be_rx_tlast_cscd                            (be_rx_tlast_cscd),
//.be_rx_tdest_cscd                            (be_rx_tdest_cscd),
//.be_rx_tuser_cscd                            (be_rx_tuser_cscd),
//.be_rx_tready_cscd                           (be_rx_tready_cscd),


.speedis100  (speedis100),
      .rtc_nanosec_field(rtc_nanosec_field),
      .rtc_sec_field(rtc_sec_field),
      .syntonised_nanosec_field(syntonised_nanosec_field),
      .syntonised_sec_field(syntonised_sec_field),
      .clk8k  (clk8k),
      .rtc_nanosec_field_1722  (rtc_nanosec_field_1722),
      .rtc_nanosec_field_in(rtc_nanosec_field_in),
      .rtc_sec_field_in(rtc_sec_field_in),
      .syntonised_nanosec_field_in(syntonised_nanosec_field_in),
      .syntonised_sec_field_in(syntonised_sec_field_in),
      .rtc_nanosec_field_1722_in(rtc_nanosec_field_1722_in),
      .clk8k_in(clk8k_in),
      .gtx_clk90_out(gtx_clk90_out),
      .gtx_dcm_locked_out(),  
.s_axi_aclk  (s_axi_aclk),
.s_axi_aresetn  (s_axi_aresetn),
.s_axi_awaddr  (s_axi_awaddr), 
.s_axi_awvalid  (s_axi_awvalid),   
.s_axi_awready  (s_axi_awready),    
.s_axi_wdata  (s_axi_wdata), 
.s_axi_wvalid  (s_axi_wvalid), 
.s_axi_wready  (s_axi_wready), 
.s_axi_bresp  (s_axi_bresp), 
.s_axi_bvalid  (s_axi_bvalid),   
.s_axi_bready  (s_axi_bready), 
.s_axi_araddr  (s_axi_araddr), 
.s_axi_arvalid  (s_axi_arvalid), 
.s_axi_arready  (s_axi_arready), 
.s_axi_rdata  (s_axi_rdata), 
.s_axi_rresp  (s_axi_rresp), 
.s_axi_rvalid  (s_axi_rvalid), 
.s_axi_rready  (s_axi_rready), 
.host_txfifo_aclk  (host_txfifo_aclk),
.host_rxfifo_aclk  (host_rxfifo_aclk),
.st_rx_axis_host_tdata   (st_rx_axis_host_tdata),
.st_rx_axis_host_tkeep   (st_rx_axis_host_tkeep),
.st_rx_axis_host_tvalid  (st_rx_axis_host_tvalid),
.st_rx_axis_host_tready  (st_rx_axis_host_tready),
.st_rx_axis_host_tlast   (st_rx_axis_host_tlast),
.st_rx_axis_host_tdest (st_rx_axis_host_tdest),
.st_rx_axis_host_tuser (st_rx_axis_host_tuser),
.st_tx_axis_host_tdata   (st_tx_axis_host_tdata),
.st_tx_axis_host_tkeep   (st_tx_axis_host_tkeep),
.st_tx_axis_host_tvalid  (st_tx_axis_host_tvalid),
.st_tx_axis_host_tready  (st_tx_axis_host_tready),
.st_tx_axis_host_tlast   (st_tx_axis_host_tlast),
.res_rx_axis_host_tdata  (res_rx_axis_host_tdata),
.res_rx_axis_host_tkeep  (res_rx_axis_host_tkeep),
.res_rx_axis_host_tvalid (res_rx_axis_host_tvalid),
.res_rx_axis_host_tready (res_rx_axis_host_tready),
.res_rx_axis_host_tlast  (res_rx_axis_host_tlast),
 .res_rx_axis_host_tdest (res_rx_axis_host_tdest),
.res_rx_axis_host_tuser (res_rx_axis_host_tuser),
.res_tx_axis_host_tdata  (res_tx_axis_host_tdata),
.res_tx_axis_host_tkeep  (res_tx_axis_host_tkeep),
.res_tx_axis_host_tvalid (res_tx_axis_host_tvalid),
.res_tx_axis_host_tready (res_tx_axis_host_tready),
.res_tx_axis_host_tlast  (res_tx_axis_host_tlast),
.be_rx_axis_host_tdata   (be_rx_axis_host_tdata),
.be_rx_axis_host_tkeep   (be_rx_axis_host_tkeep),
.be_rx_axis_host_tvalid  (be_rx_axis_host_tvalid),
.be_rx_axis_host_tready  (be_rx_axis_host_tready),
.be_rx_axis_host_tlast   (be_rx_axis_host_tlast),
 .be_rx_axis_host_tdest (be_rx_axis_host_tdest),
.be_rx_axis_host_tuser (be_rx_axis_host_tuser),
.be_tx_axis_host_tdata   (be_tx_axis_host_tdata),
.be_tx_axis_host_tkeep   (be_tx_axis_host_tkeep),
.be_tx_axis_host_tvalid  (be_tx_axis_host_tvalid),
.be_tx_axis_host_tready  (be_tx_axis_host_tready),
.be_tx_axis_host_tlast   (be_tx_axis_host_tlast),
.switch_cam_init_done  (switch_cam_init_done),
.tsn_switch_scheduler_irq (tsn_switch_scheduler_irq),
.tsn_ep_scheduler_irq (tsn_ep_scheduler_irq)   , 
// Inputs to Outside Temac
.tx_axis_pmac_tdata               (tx_axis_pmac_tdata               ),
.tx_axis_pmac_tvalid              (tx_axis_pmac_tvalid              ),
.tx_axis_pmac_tlast               (tx_axis_pmac_tlast               ),
.tx_axis_pmac_tuser               (tx_axis_pmac_tuser               ),
.tx_axis_pmac_tready              (tx_axis_pmac_tready              ),

.core_hold_disabled_override_pmac (core_hold_disabled_override_pmac ),
.hold_request_pmac                (hold_request_pmac                ),

.tx_axis_mac_tdata                (tx_axis_mac_tdata                ),
.tx_axis_mac_tvalid               (tx_axis_mac_tvalid               ),
.tx_axis_mac_tlast                (tx_axis_mac_tlast                ),
.tx_axis_mac_tuser                (tx_axis_mac_tuser                ),
.tx_axis_mac_tready               (tx_axis_mac_tready               ),

//Switch Signals
.gtx_clk_reset_reg(gtx_clk_reset_reg),
.ptp_current_time_sw(ptp_current_time_sw),
.mac_rx_clk(mac_rx_clk), 
.m_axis_rx_tdata(m_axis_rx_tdata),
.m_axis_rx_tkeep(m_axis_rx_tkeep),
.m_axis_rx_tvalid(m_axis_rx_tvalid),
.m_axis_rx_tuser(m_axis_rx_tuser),
.m_axis_rx_tlast(m_axis_rx_tlast),
.m_axis_rx_ctl(m_axis_rx_ctl), 
.mac_tx_clk(mac_tx_clk), 
.s_axis_tx_tdata(s_axis_tx_tdata),
.s_axis_tx_tkeep(s_axis_tx_tkeep),
.s_axis_tx_tvalid(s_axis_tx_tvalid),
.s_axis_tx_tlast(s_axis_tx_tlast),
.s_axis_tx_tuser(s_axis_tx_tuser),    
.s_axis_tx_tready(s_axis_tx_tready),
.s_axis_tx_tdata_ep(s_axis_tx_tdata_ep),
.s_axis_tx_tkeep_ep(s_axis_tx_tkeep_ep),
.s_axis_tx_tvalid_ep(s_axis_tx_tvalid_ep),
.s_axis_tx_tlast_ep(s_axis_tx_tlast_ep),
.s_axis_tx_tuser_ep(s_axis_tx_tuser_ep),
.s_axis_tx_tdest_ep(s_axis_tx_tdest_ep),
.s_axis_tx_tready_ep(s_axis_tx_tready_ep),
.s_axis_emac_tx_tdata(s_axis_emac_tx_tdata),
.s_axis_emac_tx_tvalid(s_axis_emac_tx_tvalid),
.s_axis_emac_tx_tlast(s_axis_emac_tx_tlast),
.s_axis_emac_tx_tuser(s_axis_emac_tx_tuser),    
.s_axis_emac_tx_tready(s_axis_emac_tx_tready),
.switch_pfc_register_in(switch_pfc_register_in),
.bus2ip_clk(bus2ip_clk),
.bus2ip_reset(bus2ip_reset),
.bus2ip_addr(bus2ip_addr),  
.bus2ip_data(bus2ip_data),
.bus2ip_rdce(bus2ip_rdce),
.bus2ip_wrce(bus2ip_wrce),
.bus2ip_cs_mac1(bus2ip_cs_mac1),  
.ip2bus_rdack_mac1(ip2bus_rdack_mac1), 
.ip2bus_wrack_mac1(ip2bus_wrack_mac1),
.ip2bus_error_mac1(ip2bus_error_mac1),
.ip2bus_data_mac1(ip2bus_data_mac1),
.bus2ip_cs_mac2(bus2ip_cs_mac2),  
.ip2bus_rdack_mac2(ip2bus_rdack_mac2), 
.ip2bus_wrack_mac2(ip2bus_wrack_mac2),
.ip2bus_error_mac2(ip2bus_error_mac2),
.ip2bus_data_mac2(ip2bus_data_mac2),
.int_mgmt_host_reset_out_reg_n_switch(int_mgmt_host_reset_out_reg_n_switch),
.s_axi_switch_rready(s_axi_switch_rready),
.s_axi_switch_bready(s_axi_switch_bready),
.s_axi_switch_arvalid(s_axi_switch_arvalid),
.s_axi_switch_awvalid(s_axi_switch_awvalid),
.s_axi_switch_wvalid(s_axi_switch_wvalid),
.s_axi_switch_arprot(s_axi_switch_arprot),
.s_axi_switch_awprot(s_axi_switch_awprot),
.s_axi_switch_araddr_sw(s_axi_switch_araddr_sw),
.s_axi_switch_awaddr_sw(s_axi_switch_awaddr_sw),
.s_axi_switch_wstrb(s_axi_switch_wstrb),
.s_axi_switch_wdata(s_axi_switch_wdata),
.s_axi_switch_arready(s_axi_switch_arready),
.s_axi_switch_awready(s_axi_switch_awready),
.s_axi_switch_wready(s_axi_switch_wready),
.s_axi_switch_rvalid(s_axi_switch_rvalid),
.s_axi_switch_bvalid(s_axi_switch_bvalid),
.s_axi_switch_bresp(s_axi_switch_bresp),
.s_axi_switch_rresp(s_axi_switch_rresp),
.s_axi_switch_rdata(s_axi_switch_rdata),
.switch_current_gate_states_out_i2(switch_current_gate_states_out_i2),
.switch_requesting_queue_valid(switch_requesting_queue_valid),
.switch_requesting_queue(switch_requesting_queue),
.switch_gate_masks_out_i(switch_gate_masks_out_i),
.switch_guard_band_nack(switch_guard_band_nack),
.switch_guard_band_ack(switch_guard_band_ack),
.switch_gate_queue_status(switch_gate_queue_status),                    
.transmission_overrun_count_incr(transmission_overrun_count_incr),
.mactx_gate_qactive(mactx_gate_qactive),
.switch_max_frame_size(switch_max_frame_size), 
.switch_mactx_frame_len(switch_mactx_frame_len),
.e_current_gate_states_out_i(e_current_gate_states_out_i),
.e_gate_masks_out(e_gate_masks_out),
.e_requesting_queue(e_requesting_queue),
.e_mactx_gate_qactive(e_mactx_gate_qactive),
.e_requesting_queue_valid(e_requesting_queue_valid),
.e_guard_band_nack(e_guard_band_nack),
.e_guard_band_ack(e_guard_band_ack),
.e_transmission_overrun_count_incr(e_transmission_overrun_count_incr),
.e_switch_mactx_frame_len(e_switch_mactx_frame_len),
.e_switch_gate_queue_status(e_switch_gate_queue_status),
.macrx_pfc(macrx_pfc),
.mactx_pfc(mactx_pfc),

// Temac Signals
.switch_be_pkt_byte_count_sw(switch_be_pkt_byte_count_sw),
.mac_debug_in                         (mac_debug_in                         ),
.rx_enable_in                         (rx_enable_in                         ),
.rx_mac_aclk_in                       (rx_mac_aclk_in                       ),
.tx_enable_in                         (tx_enable_in                         ),
.tx_mac_aclk_in                       (tx_mac_aclk_in                       ),
.speedis100_in                        (speedis100_in                        ),
.tx_ptp_frame_allowed(tx_ptp_frame_allowed),                  

// Outputs Coming from Ouside Temac
.mac_1_debug_out(mac_1_debug_out),
.mac_2_debug_out(mac_2_debug_out),
.rx_mac_reset                         (rx_mac_reset                         ),
.preemption_signal_vector             (preemption_signal_vector             ),
.rx_axis_pmac_tdata                   (rx_axis_pmac_tdata                   ),
.rx_axis_pmac_tvalid                  (rx_axis_pmac_tvalid                  ),
.rx_axis_pmac_tlast                   (rx_axis_pmac_tlast                   ),
.rx_axis_pmac_tuser                   (rx_axis_pmac_tuser                   ),
.rx_axis_mac_tdata                    (rx_axis_mac_tdata                    ),
.rx_axis_mac_tvalid                   (rx_axis_mac_tvalid                   ),
.rx_axis_mac_tlast                    (rx_axis_mac_tlast                    ),
.rx_axis_mac_tuser                    (rx_axis_mac_tuser                    ),
.int_mgmt_host_reset_out              (int_mgmt_host_reset_out              ),
.tx_ptp_frame_available               (tx_ptp_frame_available               ),  
.tx_ptp_frame_granted_for_transmission(tx_ptp_frame_granted_for_transmission),  
.tx_scheduler_internal_overhead_tsn   (tx_scheduler_internal_overhead_tsn   ),
.tx_mac_reset                         (tx_mac_reset                         )

);    

endmodule

`default_nettype wire
