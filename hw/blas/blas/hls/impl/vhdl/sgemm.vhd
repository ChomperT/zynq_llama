-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity sgemm is
generic (
    C_M_AXI_A_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_A_ID_WIDTH : INTEGER := 1;
    C_M_AXI_A_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_A_DATA_WIDTH : INTEGER := 256;
    C_M_AXI_A_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_A_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_A_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_A_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_B_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_B_ID_WIDTH : INTEGER := 1;
    C_M_AXI_B_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_B_DATA_WIDTH : INTEGER := 512;
    C_M_AXI_B_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_B_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_B_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_B_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_C_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_C_ID_WIDTH : INTEGER := 1;
    C_M_AXI_C_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_C_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_C_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_C_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_C_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_C_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 8;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_A_USER_VALUE : INTEGER := 0;
    C_M_AXI_A_PROT_VALUE : INTEGER := 0;
    C_M_AXI_A_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_B_USER_VALUE : INTEGER := 0;
    C_M_AXI_B_PROT_VALUE : INTEGER := 0;
    C_M_AXI_B_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_C_USER_VALUE : INTEGER := 0;
    C_M_AXI_C_PROT_VALUE : INTEGER := 0;
    C_M_AXI_C_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_A_AWVALID : OUT STD_LOGIC;
    m_axi_A_AWREADY : IN STD_LOGIC;
    m_axi_A_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_A_ADDR_WIDTH-1 downto 0);
    m_axi_A_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_A_ID_WIDTH-1 downto 0);
    m_axi_A_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_A_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_A_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_A_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_A_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_A_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_A_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_A_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_A_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_A_AWUSER_WIDTH-1 downto 0);
    m_axi_A_WVALID : OUT STD_LOGIC;
    m_axi_A_WREADY : IN STD_LOGIC;
    m_axi_A_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_A_DATA_WIDTH-1 downto 0);
    m_axi_A_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_A_DATA_WIDTH/8-1 downto 0);
    m_axi_A_WLAST : OUT STD_LOGIC;
    m_axi_A_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_A_ID_WIDTH-1 downto 0);
    m_axi_A_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_A_WUSER_WIDTH-1 downto 0);
    m_axi_A_ARVALID : OUT STD_LOGIC;
    m_axi_A_ARREADY : IN STD_LOGIC;
    m_axi_A_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_A_ADDR_WIDTH-1 downto 0);
    m_axi_A_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_A_ID_WIDTH-1 downto 0);
    m_axi_A_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_A_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_A_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_A_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_A_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_A_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_A_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_A_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_A_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_A_ARUSER_WIDTH-1 downto 0);
    m_axi_A_RVALID : IN STD_LOGIC;
    m_axi_A_RREADY : OUT STD_LOGIC;
    m_axi_A_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_A_DATA_WIDTH-1 downto 0);
    m_axi_A_RLAST : IN STD_LOGIC;
    m_axi_A_RID : IN STD_LOGIC_VECTOR (C_M_AXI_A_ID_WIDTH-1 downto 0);
    m_axi_A_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_A_RUSER_WIDTH-1 downto 0);
    m_axi_A_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_A_BVALID : IN STD_LOGIC;
    m_axi_A_BREADY : OUT STD_LOGIC;
    m_axi_A_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_A_BID : IN STD_LOGIC_VECTOR (C_M_AXI_A_ID_WIDTH-1 downto 0);
    m_axi_A_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_A_BUSER_WIDTH-1 downto 0);
    m_axi_B_AWVALID : OUT STD_LOGIC;
    m_axi_B_AWREADY : IN STD_LOGIC;
    m_axi_B_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_B_ADDR_WIDTH-1 downto 0);
    m_axi_B_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_B_ID_WIDTH-1 downto 0);
    m_axi_B_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_B_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_B_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_B_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_B_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_B_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_B_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_B_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_B_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_B_AWUSER_WIDTH-1 downto 0);
    m_axi_B_WVALID : OUT STD_LOGIC;
    m_axi_B_WREADY : IN STD_LOGIC;
    m_axi_B_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_B_DATA_WIDTH-1 downto 0);
    m_axi_B_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_B_DATA_WIDTH/8-1 downto 0);
    m_axi_B_WLAST : OUT STD_LOGIC;
    m_axi_B_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_B_ID_WIDTH-1 downto 0);
    m_axi_B_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_B_WUSER_WIDTH-1 downto 0);
    m_axi_B_ARVALID : OUT STD_LOGIC;
    m_axi_B_ARREADY : IN STD_LOGIC;
    m_axi_B_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_B_ADDR_WIDTH-1 downto 0);
    m_axi_B_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_B_ID_WIDTH-1 downto 0);
    m_axi_B_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_B_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_B_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_B_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_B_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_B_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_B_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_B_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_B_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_B_ARUSER_WIDTH-1 downto 0);
    m_axi_B_RVALID : IN STD_LOGIC;
    m_axi_B_RREADY : OUT STD_LOGIC;
    m_axi_B_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_B_DATA_WIDTH-1 downto 0);
    m_axi_B_RLAST : IN STD_LOGIC;
    m_axi_B_RID : IN STD_LOGIC_VECTOR (C_M_AXI_B_ID_WIDTH-1 downto 0);
    m_axi_B_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_B_RUSER_WIDTH-1 downto 0);
    m_axi_B_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_B_BVALID : IN STD_LOGIC;
    m_axi_B_BREADY : OUT STD_LOGIC;
    m_axi_B_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_B_BID : IN STD_LOGIC_VECTOR (C_M_AXI_B_ID_WIDTH-1 downto 0);
    m_axi_B_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_B_BUSER_WIDTH-1 downto 0);
    m_axi_C_AWVALID : OUT STD_LOGIC;
    m_axi_C_AWREADY : IN STD_LOGIC;
    m_axi_C_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_C_ADDR_WIDTH-1 downto 0);
    m_axi_C_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_C_ID_WIDTH-1 downto 0);
    m_axi_C_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_C_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_C_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_C_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_C_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_C_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_C_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_C_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_C_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_C_AWUSER_WIDTH-1 downto 0);
    m_axi_C_WVALID : OUT STD_LOGIC;
    m_axi_C_WREADY : IN STD_LOGIC;
    m_axi_C_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_C_DATA_WIDTH-1 downto 0);
    m_axi_C_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_C_DATA_WIDTH/8-1 downto 0);
    m_axi_C_WLAST : OUT STD_LOGIC;
    m_axi_C_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_C_ID_WIDTH-1 downto 0);
    m_axi_C_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_C_WUSER_WIDTH-1 downto 0);
    m_axi_C_ARVALID : OUT STD_LOGIC;
    m_axi_C_ARREADY : IN STD_LOGIC;
    m_axi_C_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_C_ADDR_WIDTH-1 downto 0);
    m_axi_C_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_C_ID_WIDTH-1 downto 0);
    m_axi_C_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_C_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_C_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_C_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_C_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_C_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_C_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_C_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_C_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_C_ARUSER_WIDTH-1 downto 0);
    m_axi_C_RVALID : IN STD_LOGIC;
    m_axi_C_RREADY : OUT STD_LOGIC;
    m_axi_C_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_C_DATA_WIDTH-1 downto 0);
    m_axi_C_RLAST : IN STD_LOGIC;
    m_axi_C_RID : IN STD_LOGIC_VECTOR (C_M_AXI_C_ID_WIDTH-1 downto 0);
    m_axi_C_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_C_RUSER_WIDTH-1 downto 0);
    m_axi_C_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_C_BVALID : IN STD_LOGIC;
    m_axi_C_BREADY : OUT STD_LOGIC;
    m_axi_C_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_C_BID : IN STD_LOGIC_VECTOR (C_M_AXI_C_ID_WIDTH-1 downto 0);
    m_axi_C_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_C_BUSER_WIDTH-1 downto 0);
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of sgemm is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "sgemm_sgemm,hls_ip_2023_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xck26-sfvc784-2LV-c,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.239000,HLS_SYN_LAT=195626,HLS_SYN_TPT=none,HLS_SYN_MEM=92,HLS_SYN_DSP=0,HLS_SYN_FF=22262,HLS_SYN_LUT=42258,HLS_VERSION=2023_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state74 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state75 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state76 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state77 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state78 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state79 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state80 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state81 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state82 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state83 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state84 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state85 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state86 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state87 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state88 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state89 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state90 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state91 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state92 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state93 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state94 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state95 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state96 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state97 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state98 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state99 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state100 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state101 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state102 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state103 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state104 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state105 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state106 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state107 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state108 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state109 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state110 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state111 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state112 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state113 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state114 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state115 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state116 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state117 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state118 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state119 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state120 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state121 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state122 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state123 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state124 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state125 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state126 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state127 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state128 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state129 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state130 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state131 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state132 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state133 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state134 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state135 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state136 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state137 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state138 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state139 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state140 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state141 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state142 : STD_LOGIC_VECTOR (152 downto 0) := "000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state143 : STD_LOGIC_VECTOR (152 downto 0) := "000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state144 : STD_LOGIC_VECTOR (152 downto 0) := "000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state145 : STD_LOGIC_VECTOR (152 downto 0) := "000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state146 : STD_LOGIC_VECTOR (152 downto 0) := "000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state147 : STD_LOGIC_VECTOR (152 downto 0) := "000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state148 : STD_LOGIC_VECTOR (152 downto 0) := "000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state149 : STD_LOGIC_VECTOR (152 downto 0) := "000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state150 : STD_LOGIC_VECTOR (152 downto 0) := "000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state151 : STD_LOGIC_VECTOR (152 downto 0) := "001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state152 : STD_LOGIC_VECTOR (152 downto 0) := "010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state153 : STD_LOGIC_VECTOR (152 downto 0) := "100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_44 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000100";
    constant ap_const_lv32_49 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001001";
    constant ap_const_lv32_4A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001010";
    constant ap_const_lv32_8D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001101";
    constant ap_const_lv32_8E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001110";
    constant ap_const_lv32_92 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010010";
    constant ap_const_lv32_93 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010011";
    constant ap_const_lv32_94 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010100";
    constant C_S_AXI_DATA_WIDTH : INTEGER := 32;
    constant C_M_AXI_DATA_WIDTH : INTEGER := 32;
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv32_98 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001011";
    constant ap_const_lv32_95 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010101";
    constant ap_const_lv32_96 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010110";
    constant ap_const_lv32_97 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010111";
    constant ap_const_lv63_0 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_45 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000101";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv63_1 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv32_4C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001100";
    constant ap_const_lv32_4D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001101";
    constant ap_const_lv32_4E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001110";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv32_50 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010000";
    constant ap_const_lv32_51 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010001";
    constant ap_const_lv32_52 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010010";
    constant ap_const_lv32_53 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010011";
    constant ap_const_lv32_54 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010100";
    constant ap_const_lv32_55 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010101";
    constant ap_const_lv32_56 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010110";
    constant ap_const_lv32_57 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010111";
    constant ap_const_lv32_58 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011000";
    constant ap_const_lv32_59 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011001";
    constant ap_const_lv32_5A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011010";
    constant ap_const_lv32_5B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011011";
    constant ap_const_lv32_5C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011100";
    constant ap_const_lv32_5D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011101";
    constant ap_const_lv32_5E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011110";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_61 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100001";
    constant ap_const_lv32_62 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100010";
    constant ap_const_lv32_63 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100011";
    constant ap_const_lv32_64 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100100";
    constant ap_const_lv32_65 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100101";
    constant ap_const_lv32_66 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100110";
    constant ap_const_lv32_67 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100111";
    constant ap_const_lv32_68 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101000";
    constant ap_const_lv32_69 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101001";
    constant ap_const_lv32_6A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101010";
    constant ap_const_lv32_6B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101011";
    constant ap_const_lv32_6C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101100";
    constant ap_const_lv32_6D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101101";
    constant ap_const_lv32_6E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101110";
    constant ap_const_lv32_6F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101111";
    constant ap_const_lv32_70 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110000";
    constant ap_const_lv32_71 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110001";
    constant ap_const_lv32_72 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110010";
    constant ap_const_lv32_73 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110011";
    constant ap_const_lv32_74 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110100";
    constant ap_const_lv32_75 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110101";
    constant ap_const_lv32_76 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110110";
    constant ap_const_lv32_77 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110111";
    constant ap_const_lv32_78 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111000";
    constant ap_const_lv32_79 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111001";
    constant ap_const_lv32_7A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111010";
    constant ap_const_lv32_7B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111011";
    constant ap_const_lv32_7C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111100";
    constant ap_const_lv32_7D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111101";
    constant ap_const_lv32_7E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111110";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv32_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_const_lv32_81 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000001";
    constant ap_const_lv32_82 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000010";
    constant ap_const_lv32_83 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000011";
    constant ap_const_lv32_84 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000100";
    constant ap_const_lv32_85 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000101";
    constant ap_const_lv32_86 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000110";
    constant ap_const_lv32_87 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000111";
    constant ap_const_lv32_88 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001000";
    constant ap_const_lv32_89 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001001";
    constant ap_const_lv32_8A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001010";
    constant ap_const_lv32_8B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001011";
    constant ap_const_lv32_8C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001100";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv256_lc_1 : STD_LOGIC_VECTOR (255 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv512_lc_1 : STD_LOGIC_VECTOR (511 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal k : STD_LOGIC_VECTOR (31 downto 0);
    signal A_offset : STD_LOGIC_VECTOR (63 downto 0);
    signal lda : STD_LOGIC_VECTOR (63 downto 0);
    signal B_offset : STD_LOGIC_VECTOR (63 downto 0);
    signal ldb : STD_LOGIC_VECTOR (63 downto 0);
    signal C_offset : STD_LOGIC_VECTOR (63 downto 0);
    signal ldc : STD_LOGIC_VECTOR (63 downto 0);
    signal RM : STD_LOGIC_VECTOR (7 downto 0);
    signal RN : STD_LOGIC_VECTOR (7 downto 0);
    signal m0 : STD_LOGIC_VECTOR (63 downto 0);
    signal m : STD_LOGIC_VECTOR (63 downto 0);
    signal n0 : STD_LOGIC_VECTOR (63 downto 0);
    signal n : STD_LOGIC_VECTOR (63 downto 0);
    signal RN_read_reg_438 : STD_LOGIC_VECTOR (7 downto 0);
    signal RM_read_reg_446 : STD_LOGIC_VECTOR (7 downto 0);
    signal C_offset_read_reg_456 : STD_LOGIC_VECTOR (63 downto 0);
    signal B_offset_read_reg_461 : STD_LOGIC_VECTOR (63 downto 0);
    signal A_offset_read_reg_466 : STD_LOGIC_VECTOR (63 downto 0);
    signal k_read_reg_471 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln97_fu_284_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal trunc_ln97_reg_476 : STD_LOGIC_VECTOR (62 downto 0);
    signal trunc_ln97_1_fu_288_p1 : STD_LOGIC_VECTOR (61 downto 0);
    signal trunc_ln97_1_reg_481 : STD_LOGIC_VECTOR (61 downto 0);
    signal trunc_ln97_2_fu_292_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal trunc_ln97_2_reg_486 : STD_LOGIC_VECTOR (62 downto 0);
    signal trunc_ln97_3_fu_296_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal trunc_ln97_3_reg_491 : STD_LOGIC_VECTOR (62 downto 0);
    signal trunc_ln97_4_fu_300_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal trunc_ln97_4_reg_496 : STD_LOGIC_VECTOR (62 downto 0);
    signal sub_ln58_fu_304_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_ln58_reg_501 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_ln59_fu_310_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_ln59_reg_506 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_fu_324_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ytiles_reg_521 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state69 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state69 : signal is "none";
    signal grp_fu_332_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xtiles_reg_526 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln58_1_fu_337_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal zext_ln58_1_reg_533 : STD_LOGIC_VECTOR (62 downto 0);
    signal ap_CS_fsm_state74 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state74 : signal is "none";
    signal zext_ln59_1_fu_340_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal zext_ln59_1_reg_538 : STD_LOGIC_VECTOR (62 downto 0);
    signal grp_fu_280_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tiles_reg_543 : STD_LOGIC_VECTOR (63 downto 0);
    signal cmp257_i_fu_343_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp257_i_reg_548 : STD_LOGIC_VECTOR (0 downto 0);
    signal mul_ln97_fu_354_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln97_reg_552 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln67_fu_363_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state75 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state75 : signal is "none";
    signal job_2_fu_372_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal job_2_reg_567 : STD_LOGIC_VECTOR (62 downto 0);
    signal grp_fu_378_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal sdiv_ln69_reg_572 : STD_LOGIC_VECTOR (62 downto 0);
    signal ap_CS_fsm_state142 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state142 : signal is "none";
    signal grp_fu_383_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal srem_ln70_reg_577 : STD_LOGIC_VECTOR (62 downto 0);
    signal ap_CS_fsm_state143 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state143 : signal is "none";
    signal grp_fu_272_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal mul_ln69_reg_592 : STD_LOGIC_VECTOR (62 downto 0);
    signal ap_CS_fsm_state147 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state147 : signal is "none";
    signal grp_fu_276_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal mul_ln70_reg_597 : STD_LOGIC_VECTOR (62 downto 0);
    signal add_ln69_fu_396_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal add_ln69_reg_602 : STD_LOGIC_VECTOR (62 downto 0);
    signal ap_CS_fsm_state148 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state148 : signal is "none";
    signal trunc_ln70_1_fu_400_p1 : STD_LOGIC_VECTOR (61 downto 0);
    signal trunc_ln70_1_reg_607 : STD_LOGIC_VECTOR (61 downto 0);
    signal add_ln70_fu_404_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal add_ln70_reg_612 : STD_LOGIC_VECTOR (62 downto 0);
    signal trunc_ln72_fu_408_p1 : STD_LOGIC_VECTOR (61 downto 0);
    signal trunc_ln72_reg_617 : STD_LOGIC_VECTOR (61 downto 0);
    signal l_1_fu_421_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal l_1_reg_625 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state149 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state149 : signal is "none";
    signal Cv_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal Cv_ce0 : STD_LOGIC;
    signal Cv_we0 : STD_LOGIC;
    signal Cv_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal Cv_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_sgemm_Pipeline_1_fu_234_ap_start : STD_LOGIC;
    signal grp_sgemm_Pipeline_1_fu_234_ap_done : STD_LOGIC;
    signal grp_sgemm_Pipeline_1_fu_234_ap_idle : STD_LOGIC;
    signal grp_sgemm_Pipeline_1_fu_234_ap_ready : STD_LOGIC;
    signal grp_sgemm_Pipeline_1_fu_234_Cv_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_sgemm_Pipeline_1_fu_234_Cv_ce0 : STD_LOGIC;
    signal grp_sgemm_Pipeline_1_fu_234_Cv_we0 : STD_LOGIC;
    signal grp_sgemm_Pipeline_1_fu_234_Cv_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_sgemm_Pipeline_VITIS_LOOP_76_1_calc_loop_fu_239_ap_start : STD_LOGIC;
    signal grp_sgemm_Pipeline_VITIS_LOOP_76_1_calc_loop_fu_239_ap_done : STD_LOGIC;
    signal grp_sgemm_Pipeline_VITIS_LOOP_76_1_calc_loop_fu_239_ap_idle : STD_LOGIC;
    signal grp_sgemm_Pipeline_VITIS_LOOP_76_1_calc_loop_fu_239_ap_ready : STD_LOGIC;
    signal grp_sgemm_Pipeline_VITIS_LOOP_76_1_calc_loop_fu_239_m_axi_B_AWVALID : STD_LOGIC;
    signal grp_sgemm_Pipeline_VITIS_LOOP_76_1_calc_loop_fu_239_m_axi_B_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_sgemm_Pipeline_VITIS_LOOP_76_1_calc_loop_fu_239_m_axi_B_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_sgemm_Pipeline_VITIS_LOOP_76_1_calc_loop_fu_239_m_axi_B_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sgemm_Pipeline_VITIS_LOOP_76_1_calc_loop_fu_239_m_axi_B_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_sgemm_Pipeline_VITIS_LOOP_76_1_calc_loop_fu_239_m_axi_B_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_sgemm_Pipeline_VITIS_LOOP_76_1_calc_loop_fu_239_m_axi_B_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_sgemm_Pipeline_VITIS_LOOP_76_1_calc_loop_fu_239_m_axi_B_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_sgemm_Pipeline_VITIS_LOOP_76_1_calc_loop_fu_239_m_axi_B_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_sgemm_Pipeline_VITIS_LOOP_76_1_calc_loop_fu_239_m_axi_B_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_sgemm_Pipeline_VITIS_LOOP_76_1_calc_loop_fu_239_m_axi_B_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_sgemm_Pipeline_VITIS_LOOP_76_1_calc_loop_fu_239_m_axi_B_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_sgemm_Pipeline_VITIS_LOOP_76_1_calc_loop_fu_239_m_axi_B_WVALID : STD_LOGIC;
    signal grp_sgemm_Pipeline_VITIS_LOOP_76_1_calc_loop_fu_239_m_axi_B_WDATA : STD_LOGIC_VECTOR (511 downto 0);
    signal grp_sgemm_Pipeline_VITIS_LOOP_76_1_calc_loop_fu_239_m_axi_B_WSTRB : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_sgemm_Pipeline_VITIS_LOOP_76_1_calc_loop_fu_239_m_axi_B_WLAST : STD_LOGIC;
    signal grp_sgemm_Pipeline_VITIS_LOOP_76_1_calc_loop_fu_239_m_axi_B_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_sgemm_Pipeline_VITIS_LOOP_76_1_calc_loop_fu_239_m_axi_B_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_sgemm_Pipeline_VITIS_LOOP_76_1_calc_loop_fu_239_m_axi_B_ARVALID : STD_LOGIC;
    signal grp_sgemm_Pipeline_VITIS_LOOP_76_1_calc_loop_fu_239_m_axi_B_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_sgemm_Pipeline_VITIS_LOOP_76_1_calc_loop_fu_239_m_axi_B_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_sgemm_Pipeline_VITIS_LOOP_76_1_calc_loop_fu_239_m_axi_B_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sgemm_Pipeline_VITIS_LOOP_76_1_calc_loop_fu_239_m_axi_B_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_sgemm_Pipeline_VITIS_LOOP_76_1_calc_loop_fu_239_m_axi_B_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_sgemm_Pipeline_VITIS_LOOP_76_1_calc_loop_fu_239_m_axi_B_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_sgemm_Pipeline_VITIS_LOOP_76_1_calc_loop_fu_239_m_axi_B_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_sgemm_Pipeline_VITIS_LOOP_76_1_calc_loop_fu_239_m_axi_B_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_sgemm_Pipeline_VITIS_LOOP_76_1_calc_loop_fu_239_m_axi_B_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_sgemm_Pipeline_VITIS_LOOP_76_1_calc_loop_fu_239_m_axi_B_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_sgemm_Pipeline_VITIS_LOOP_76_1_calc_loop_fu_239_m_axi_B_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_sgemm_Pipeline_VITIS_LOOP_76_1_calc_loop_fu_239_m_axi_B_RREADY : STD_LOGIC;
    signal grp_sgemm_Pipeline_VITIS_LOOP_76_1_calc_loop_fu_239_m_axi_B_BREADY : STD_LOGIC;
    signal grp_sgemm_Pipeline_VITIS_LOOP_76_1_calc_loop_fu_239_m_axi_A_AWVALID : STD_LOGIC;
    signal grp_sgemm_Pipeline_VITIS_LOOP_76_1_calc_loop_fu_239_m_axi_A_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_sgemm_Pipeline_VITIS_LOOP_76_1_calc_loop_fu_239_m_axi_A_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_sgemm_Pipeline_VITIS_LOOP_76_1_calc_loop_fu_239_m_axi_A_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sgemm_Pipeline_VITIS_LOOP_76_1_calc_loop_fu_239_m_axi_A_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_sgemm_Pipeline_VITIS_LOOP_76_1_calc_loop_fu_239_m_axi_A_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_sgemm_Pipeline_VITIS_LOOP_76_1_calc_loop_fu_239_m_axi_A_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_sgemm_Pipeline_VITIS_LOOP_76_1_calc_loop_fu_239_m_axi_A_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_sgemm_Pipeline_VITIS_LOOP_76_1_calc_loop_fu_239_m_axi_A_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_sgemm_Pipeline_VITIS_LOOP_76_1_calc_loop_fu_239_m_axi_A_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_sgemm_Pipeline_VITIS_LOOP_76_1_calc_loop_fu_239_m_axi_A_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_sgemm_Pipeline_VITIS_LOOP_76_1_calc_loop_fu_239_m_axi_A_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_sgemm_Pipeline_VITIS_LOOP_76_1_calc_loop_fu_239_m_axi_A_WVALID : STD_LOGIC;
    signal grp_sgemm_Pipeline_VITIS_LOOP_76_1_calc_loop_fu_239_m_axi_A_WDATA : STD_LOGIC_VECTOR (255 downto 0);
    signal grp_sgemm_Pipeline_VITIS_LOOP_76_1_calc_loop_fu_239_m_axi_A_WSTRB : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sgemm_Pipeline_VITIS_LOOP_76_1_calc_loop_fu_239_m_axi_A_WLAST : STD_LOGIC;
    signal grp_sgemm_Pipeline_VITIS_LOOP_76_1_calc_loop_fu_239_m_axi_A_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_sgemm_Pipeline_VITIS_LOOP_76_1_calc_loop_fu_239_m_axi_A_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_sgemm_Pipeline_VITIS_LOOP_76_1_calc_loop_fu_239_m_axi_A_ARVALID : STD_LOGIC;
    signal grp_sgemm_Pipeline_VITIS_LOOP_76_1_calc_loop_fu_239_m_axi_A_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_sgemm_Pipeline_VITIS_LOOP_76_1_calc_loop_fu_239_m_axi_A_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_sgemm_Pipeline_VITIS_LOOP_76_1_calc_loop_fu_239_m_axi_A_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sgemm_Pipeline_VITIS_LOOP_76_1_calc_loop_fu_239_m_axi_A_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_sgemm_Pipeline_VITIS_LOOP_76_1_calc_loop_fu_239_m_axi_A_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_sgemm_Pipeline_VITIS_LOOP_76_1_calc_loop_fu_239_m_axi_A_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_sgemm_Pipeline_VITIS_LOOP_76_1_calc_loop_fu_239_m_axi_A_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_sgemm_Pipeline_VITIS_LOOP_76_1_calc_loop_fu_239_m_axi_A_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_sgemm_Pipeline_VITIS_LOOP_76_1_calc_loop_fu_239_m_axi_A_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_sgemm_Pipeline_VITIS_LOOP_76_1_calc_loop_fu_239_m_axi_A_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_sgemm_Pipeline_VITIS_LOOP_76_1_calc_loop_fu_239_m_axi_A_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_sgemm_Pipeline_VITIS_LOOP_76_1_calc_loop_fu_239_m_axi_A_RREADY : STD_LOGIC;
    signal grp_sgemm_Pipeline_VITIS_LOOP_76_1_calc_loop_fu_239_m_axi_A_BREADY : STD_LOGIC;
    signal grp_sgemm_Pipeline_VITIS_LOOP_76_1_calc_loop_fu_239_Cv_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_sgemm_Pipeline_VITIS_LOOP_76_1_calc_loop_fu_239_Cv_ce0 : STD_LOGIC;
    signal grp_sgemm_Pipeline_VITIS_LOOP_76_1_calc_loop_fu_239_Cv_we0 : STD_LOGIC;
    signal grp_sgemm_Pipeline_VITIS_LOOP_76_1_calc_loop_fu_239_Cv_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_sgemm_Pipeline_VITIS_LOOP_87_2_VITIS_LOOP_89_3_fu_258_ap_start : STD_LOGIC;
    signal grp_sgemm_Pipeline_VITIS_LOOP_87_2_VITIS_LOOP_89_3_fu_258_ap_done : STD_LOGIC;
    signal grp_sgemm_Pipeline_VITIS_LOOP_87_2_VITIS_LOOP_89_3_fu_258_ap_idle : STD_LOGIC;
    signal grp_sgemm_Pipeline_VITIS_LOOP_87_2_VITIS_LOOP_89_3_fu_258_ap_ready : STD_LOGIC;
    signal grp_sgemm_Pipeline_VITIS_LOOP_87_2_VITIS_LOOP_89_3_fu_258_m_axi_C_AWVALID : STD_LOGIC;
    signal grp_sgemm_Pipeline_VITIS_LOOP_87_2_VITIS_LOOP_89_3_fu_258_m_axi_C_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_sgemm_Pipeline_VITIS_LOOP_87_2_VITIS_LOOP_89_3_fu_258_m_axi_C_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_sgemm_Pipeline_VITIS_LOOP_87_2_VITIS_LOOP_89_3_fu_258_m_axi_C_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sgemm_Pipeline_VITIS_LOOP_87_2_VITIS_LOOP_89_3_fu_258_m_axi_C_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_sgemm_Pipeline_VITIS_LOOP_87_2_VITIS_LOOP_89_3_fu_258_m_axi_C_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_sgemm_Pipeline_VITIS_LOOP_87_2_VITIS_LOOP_89_3_fu_258_m_axi_C_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_sgemm_Pipeline_VITIS_LOOP_87_2_VITIS_LOOP_89_3_fu_258_m_axi_C_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_sgemm_Pipeline_VITIS_LOOP_87_2_VITIS_LOOP_89_3_fu_258_m_axi_C_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_sgemm_Pipeline_VITIS_LOOP_87_2_VITIS_LOOP_89_3_fu_258_m_axi_C_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_sgemm_Pipeline_VITIS_LOOP_87_2_VITIS_LOOP_89_3_fu_258_m_axi_C_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_sgemm_Pipeline_VITIS_LOOP_87_2_VITIS_LOOP_89_3_fu_258_m_axi_C_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_sgemm_Pipeline_VITIS_LOOP_87_2_VITIS_LOOP_89_3_fu_258_m_axi_C_WVALID : STD_LOGIC;
    signal grp_sgemm_Pipeline_VITIS_LOOP_87_2_VITIS_LOOP_89_3_fu_258_m_axi_C_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sgemm_Pipeline_VITIS_LOOP_87_2_VITIS_LOOP_89_3_fu_258_m_axi_C_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_sgemm_Pipeline_VITIS_LOOP_87_2_VITIS_LOOP_89_3_fu_258_m_axi_C_WLAST : STD_LOGIC;
    signal grp_sgemm_Pipeline_VITIS_LOOP_87_2_VITIS_LOOP_89_3_fu_258_m_axi_C_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_sgemm_Pipeline_VITIS_LOOP_87_2_VITIS_LOOP_89_3_fu_258_m_axi_C_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_sgemm_Pipeline_VITIS_LOOP_87_2_VITIS_LOOP_89_3_fu_258_m_axi_C_ARVALID : STD_LOGIC;
    signal grp_sgemm_Pipeline_VITIS_LOOP_87_2_VITIS_LOOP_89_3_fu_258_m_axi_C_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_sgemm_Pipeline_VITIS_LOOP_87_2_VITIS_LOOP_89_3_fu_258_m_axi_C_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_sgemm_Pipeline_VITIS_LOOP_87_2_VITIS_LOOP_89_3_fu_258_m_axi_C_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sgemm_Pipeline_VITIS_LOOP_87_2_VITIS_LOOP_89_3_fu_258_m_axi_C_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_sgemm_Pipeline_VITIS_LOOP_87_2_VITIS_LOOP_89_3_fu_258_m_axi_C_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_sgemm_Pipeline_VITIS_LOOP_87_2_VITIS_LOOP_89_3_fu_258_m_axi_C_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_sgemm_Pipeline_VITIS_LOOP_87_2_VITIS_LOOP_89_3_fu_258_m_axi_C_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_sgemm_Pipeline_VITIS_LOOP_87_2_VITIS_LOOP_89_3_fu_258_m_axi_C_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_sgemm_Pipeline_VITIS_LOOP_87_2_VITIS_LOOP_89_3_fu_258_m_axi_C_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_sgemm_Pipeline_VITIS_LOOP_87_2_VITIS_LOOP_89_3_fu_258_m_axi_C_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_sgemm_Pipeline_VITIS_LOOP_87_2_VITIS_LOOP_89_3_fu_258_m_axi_C_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_sgemm_Pipeline_VITIS_LOOP_87_2_VITIS_LOOP_89_3_fu_258_m_axi_C_RREADY : STD_LOGIC;
    signal grp_sgemm_Pipeline_VITIS_LOOP_87_2_VITIS_LOOP_89_3_fu_258_m_axi_C_BREADY : STD_LOGIC;
    signal grp_sgemm_Pipeline_VITIS_LOOP_87_2_VITIS_LOOP_89_3_fu_258_Cv_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_sgemm_Pipeline_VITIS_LOOP_87_2_VITIS_LOOP_89_3_fu_258_Cv_ce0 : STD_LOGIC;
    signal A_AWREADY : STD_LOGIC;
    signal A_WREADY : STD_LOGIC;
    signal A_ARVALID : STD_LOGIC;
    signal A_ARREADY : STD_LOGIC;
    signal A_RVALID : STD_LOGIC;
    signal A_RREADY : STD_LOGIC;
    signal A_RDATA : STD_LOGIC_VECTOR (255 downto 0);
    signal A_RFIFONUM : STD_LOGIC_VECTOR (8 downto 0);
    signal A_BVALID : STD_LOGIC;
    signal B_AWREADY : STD_LOGIC;
    signal B_WREADY : STD_LOGIC;
    signal B_ARVALID : STD_LOGIC;
    signal B_ARREADY : STD_LOGIC;
    signal B_RVALID : STD_LOGIC;
    signal B_RREADY : STD_LOGIC;
    signal B_RDATA : STD_LOGIC_VECTOR (511 downto 0);
    signal B_RFIFONUM : STD_LOGIC_VECTOR (8 downto 0);
    signal B_BVALID : STD_LOGIC;
    signal C_AWVALID : STD_LOGIC;
    signal C_AWREADY : STD_LOGIC;
    signal C_WVALID : STD_LOGIC;
    signal C_WREADY : STD_LOGIC;
    signal C_ARREADY : STD_LOGIC;
    signal C_RVALID : STD_LOGIC;
    signal C_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal C_RFIFONUM : STD_LOGIC_VECTOR (8 downto 0);
    signal C_BVALID : STD_LOGIC;
    signal C_BREADY : STD_LOGIC;
    signal l_reg_222 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state153 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state153 : signal is "none";
    signal ap_block_state153_on_subcall_done : BOOLEAN;
    signal grp_sgemm_Pipeline_1_fu_234_ap_start_reg : STD_LOGIC := '0';
    signal icmp_ln67_fu_367_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state76 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state76 : signal is "none";
    signal grp_sgemm_Pipeline_VITIS_LOOP_76_1_calc_loop_fu_239_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state150 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state150 : signal is "none";
    signal ap_CS_fsm_state151 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state151 : signal is "none";
    signal grp_sgemm_Pipeline_VITIS_LOOP_87_2_VITIS_LOOP_89_3_fu_258_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state152 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state152 : signal is "none";
    signal job_fu_136 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000000";
    signal icmp_ln72_fu_416_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_272_p0 : STD_LOGIC_VECTOR (62 downto 0);
    signal grp_fu_272_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_276_p0 : STD_LOGIC_VECTOR (62 downto 0);
    signal grp_fu_276_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state70 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state70 : signal is "none";
    signal grp_fu_324_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_332_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln97_fu_354_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln97_fu_354_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln72_fu_412_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_324_ap_start : STD_LOGIC;
    signal grp_fu_324_ap_done : STD_LOGIC;
    signal grp_fu_332_ap_start : STD_LOGIC;
    signal grp_fu_332_ap_done : STD_LOGIC;
    signal grp_fu_378_ap_start : STD_LOGIC;
    signal grp_fu_378_ap_done : STD_LOGIC;
    signal grp_fu_378_ce : STD_LOGIC;
    signal ap_CS_fsm_state77 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state77 : signal is "none";
    signal ap_CS_fsm_state78 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state78 : signal is "none";
    signal ap_CS_fsm_state79 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state79 : signal is "none";
    signal ap_CS_fsm_state80 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state80 : signal is "none";
    signal ap_CS_fsm_state81 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state81 : signal is "none";
    signal ap_CS_fsm_state82 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state82 : signal is "none";
    signal ap_CS_fsm_state83 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state83 : signal is "none";
    signal ap_CS_fsm_state84 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state84 : signal is "none";
    signal ap_CS_fsm_state85 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state85 : signal is "none";
    signal ap_CS_fsm_state86 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state86 : signal is "none";
    signal ap_CS_fsm_state87 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state87 : signal is "none";
    signal ap_CS_fsm_state88 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state88 : signal is "none";
    signal ap_CS_fsm_state89 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state89 : signal is "none";
    signal ap_CS_fsm_state90 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state90 : signal is "none";
    signal ap_CS_fsm_state91 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state91 : signal is "none";
    signal ap_CS_fsm_state92 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state92 : signal is "none";
    signal ap_CS_fsm_state93 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state93 : signal is "none";
    signal ap_CS_fsm_state94 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state94 : signal is "none";
    signal ap_CS_fsm_state95 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state95 : signal is "none";
    signal ap_CS_fsm_state96 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state96 : signal is "none";
    signal ap_CS_fsm_state97 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state97 : signal is "none";
    signal ap_CS_fsm_state98 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state98 : signal is "none";
    signal ap_CS_fsm_state99 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state99 : signal is "none";
    signal ap_CS_fsm_state100 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state100 : signal is "none";
    signal ap_CS_fsm_state101 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state101 : signal is "none";
    signal ap_CS_fsm_state102 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state102 : signal is "none";
    signal ap_CS_fsm_state103 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state103 : signal is "none";
    signal ap_CS_fsm_state104 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state104 : signal is "none";
    signal ap_CS_fsm_state105 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state105 : signal is "none";
    signal ap_CS_fsm_state106 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state106 : signal is "none";
    signal ap_CS_fsm_state107 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state107 : signal is "none";
    signal ap_CS_fsm_state108 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state108 : signal is "none";
    signal ap_CS_fsm_state109 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state109 : signal is "none";
    signal ap_CS_fsm_state110 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state110 : signal is "none";
    signal ap_CS_fsm_state111 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state111 : signal is "none";
    signal ap_CS_fsm_state112 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state112 : signal is "none";
    signal ap_CS_fsm_state113 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state113 : signal is "none";
    signal ap_CS_fsm_state114 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state114 : signal is "none";
    signal ap_CS_fsm_state115 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state115 : signal is "none";
    signal ap_CS_fsm_state116 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state116 : signal is "none";
    signal ap_CS_fsm_state117 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state117 : signal is "none";
    signal ap_CS_fsm_state118 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state118 : signal is "none";
    signal ap_CS_fsm_state119 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state119 : signal is "none";
    signal ap_CS_fsm_state120 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state120 : signal is "none";
    signal ap_CS_fsm_state121 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state121 : signal is "none";
    signal ap_CS_fsm_state122 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state122 : signal is "none";
    signal ap_CS_fsm_state123 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state123 : signal is "none";
    signal ap_CS_fsm_state124 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state124 : signal is "none";
    signal ap_CS_fsm_state125 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state125 : signal is "none";
    signal ap_CS_fsm_state126 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state126 : signal is "none";
    signal ap_CS_fsm_state127 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state127 : signal is "none";
    signal ap_CS_fsm_state128 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state128 : signal is "none";
    signal ap_CS_fsm_state129 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state129 : signal is "none";
    signal ap_CS_fsm_state130 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state130 : signal is "none";
    signal ap_CS_fsm_state131 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state131 : signal is "none";
    signal ap_CS_fsm_state132 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state132 : signal is "none";
    signal ap_CS_fsm_state133 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state133 : signal is "none";
    signal ap_CS_fsm_state134 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state134 : signal is "none";
    signal ap_CS_fsm_state135 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state135 : signal is "none";
    signal ap_CS_fsm_state136 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state136 : signal is "none";
    signal ap_CS_fsm_state137 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state137 : signal is "none";
    signal ap_CS_fsm_state138 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state138 : signal is "none";
    signal ap_CS_fsm_state139 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state139 : signal is "none";
    signal ap_CS_fsm_state140 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state140 : signal is "none";
    signal ap_CS_fsm_state141 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state141 : signal is "none";
    signal grp_fu_383_ap_start : STD_LOGIC;
    signal grp_fu_383_ap_done : STD_LOGIC;
    signal grp_fu_383_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (152 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ST_fsm_state17_blk : STD_LOGIC;
    signal ap_ST_fsm_state18_blk : STD_LOGIC;
    signal ap_ST_fsm_state19_blk : STD_LOGIC;
    signal ap_ST_fsm_state20_blk : STD_LOGIC;
    signal ap_ST_fsm_state21_blk : STD_LOGIC;
    signal ap_ST_fsm_state22_blk : STD_LOGIC;
    signal ap_ST_fsm_state23_blk : STD_LOGIC;
    signal ap_ST_fsm_state24_blk : STD_LOGIC;
    signal ap_ST_fsm_state25_blk : STD_LOGIC;
    signal ap_ST_fsm_state26_blk : STD_LOGIC;
    signal ap_ST_fsm_state27_blk : STD_LOGIC;
    signal ap_ST_fsm_state28_blk : STD_LOGIC;
    signal ap_ST_fsm_state29_blk : STD_LOGIC;
    signal ap_ST_fsm_state30_blk : STD_LOGIC;
    signal ap_ST_fsm_state31_blk : STD_LOGIC;
    signal ap_ST_fsm_state32_blk : STD_LOGIC;
    signal ap_ST_fsm_state33_blk : STD_LOGIC;
    signal ap_ST_fsm_state34_blk : STD_LOGIC;
    signal ap_ST_fsm_state35_blk : STD_LOGIC;
    signal ap_ST_fsm_state36_blk : STD_LOGIC;
    signal ap_ST_fsm_state37_blk : STD_LOGIC;
    signal ap_ST_fsm_state38_blk : STD_LOGIC;
    signal ap_ST_fsm_state39_blk : STD_LOGIC;
    signal ap_ST_fsm_state40_blk : STD_LOGIC;
    signal ap_ST_fsm_state41_blk : STD_LOGIC;
    signal ap_ST_fsm_state42_blk : STD_LOGIC;
    signal ap_ST_fsm_state43_blk : STD_LOGIC;
    signal ap_ST_fsm_state44_blk : STD_LOGIC;
    signal ap_ST_fsm_state45_blk : STD_LOGIC;
    signal ap_ST_fsm_state46_blk : STD_LOGIC;
    signal ap_ST_fsm_state47_blk : STD_LOGIC;
    signal ap_ST_fsm_state48_blk : STD_LOGIC;
    signal ap_ST_fsm_state49_blk : STD_LOGIC;
    signal ap_ST_fsm_state50_blk : STD_LOGIC;
    signal ap_ST_fsm_state51_blk : STD_LOGIC;
    signal ap_ST_fsm_state52_blk : STD_LOGIC;
    signal ap_ST_fsm_state53_blk : STD_LOGIC;
    signal ap_ST_fsm_state54_blk : STD_LOGIC;
    signal ap_ST_fsm_state55_blk : STD_LOGIC;
    signal ap_ST_fsm_state56_blk : STD_LOGIC;
    signal ap_ST_fsm_state57_blk : STD_LOGIC;
    signal ap_ST_fsm_state58_blk : STD_LOGIC;
    signal ap_ST_fsm_state59_blk : STD_LOGIC;
    signal ap_ST_fsm_state60_blk : STD_LOGIC;
    signal ap_ST_fsm_state61_blk : STD_LOGIC;
    signal ap_ST_fsm_state62_blk : STD_LOGIC;
    signal ap_ST_fsm_state63_blk : STD_LOGIC;
    signal ap_ST_fsm_state64_blk : STD_LOGIC;
    signal ap_ST_fsm_state65_blk : STD_LOGIC;
    signal ap_ST_fsm_state66_blk : STD_LOGIC;
    signal ap_ST_fsm_state67_blk : STD_LOGIC;
    signal ap_ST_fsm_state68_blk : STD_LOGIC;
    signal ap_ST_fsm_state69_blk : STD_LOGIC;
    signal ap_ST_fsm_state70_blk : STD_LOGIC;
    signal ap_ST_fsm_state71_blk : STD_LOGIC;
    signal ap_ST_fsm_state72_blk : STD_LOGIC;
    signal ap_ST_fsm_state73_blk : STD_LOGIC;
    signal ap_ST_fsm_state74_blk : STD_LOGIC;
    signal ap_ST_fsm_state75_blk : STD_LOGIC;
    signal ap_ST_fsm_state76_blk : STD_LOGIC;
    signal ap_ST_fsm_state77_blk : STD_LOGIC;
    signal ap_ST_fsm_state78_blk : STD_LOGIC;
    signal ap_ST_fsm_state79_blk : STD_LOGIC;
    signal ap_ST_fsm_state80_blk : STD_LOGIC;
    signal ap_ST_fsm_state81_blk : STD_LOGIC;
    signal ap_ST_fsm_state82_blk : STD_LOGIC;
    signal ap_ST_fsm_state83_blk : STD_LOGIC;
    signal ap_ST_fsm_state84_blk : STD_LOGIC;
    signal ap_ST_fsm_state85_blk : STD_LOGIC;
    signal ap_ST_fsm_state86_blk : STD_LOGIC;
    signal ap_ST_fsm_state87_blk : STD_LOGIC;
    signal ap_ST_fsm_state88_blk : STD_LOGIC;
    signal ap_ST_fsm_state89_blk : STD_LOGIC;
    signal ap_ST_fsm_state90_blk : STD_LOGIC;
    signal ap_ST_fsm_state91_blk : STD_LOGIC;
    signal ap_ST_fsm_state92_blk : STD_LOGIC;
    signal ap_ST_fsm_state93_blk : STD_LOGIC;
    signal ap_ST_fsm_state94_blk : STD_LOGIC;
    signal ap_ST_fsm_state95_blk : STD_LOGIC;
    signal ap_ST_fsm_state96_blk : STD_LOGIC;
    signal ap_ST_fsm_state97_blk : STD_LOGIC;
    signal ap_ST_fsm_state98_blk : STD_LOGIC;
    signal ap_ST_fsm_state99_blk : STD_LOGIC;
    signal ap_ST_fsm_state100_blk : STD_LOGIC;
    signal ap_ST_fsm_state101_blk : STD_LOGIC;
    signal ap_ST_fsm_state102_blk : STD_LOGIC;
    signal ap_ST_fsm_state103_blk : STD_LOGIC;
    signal ap_ST_fsm_state104_blk : STD_LOGIC;
    signal ap_ST_fsm_state105_blk : STD_LOGIC;
    signal ap_ST_fsm_state106_blk : STD_LOGIC;
    signal ap_ST_fsm_state107_blk : STD_LOGIC;
    signal ap_ST_fsm_state108_blk : STD_LOGIC;
    signal ap_ST_fsm_state109_blk : STD_LOGIC;
    signal ap_ST_fsm_state110_blk : STD_LOGIC;
    signal ap_ST_fsm_state111_blk : STD_LOGIC;
    signal ap_ST_fsm_state112_blk : STD_LOGIC;
    signal ap_ST_fsm_state113_blk : STD_LOGIC;
    signal ap_ST_fsm_state114_blk : STD_LOGIC;
    signal ap_ST_fsm_state115_blk : STD_LOGIC;
    signal ap_ST_fsm_state116_blk : STD_LOGIC;
    signal ap_ST_fsm_state117_blk : STD_LOGIC;
    signal ap_ST_fsm_state118_blk : STD_LOGIC;
    signal ap_ST_fsm_state119_blk : STD_LOGIC;
    signal ap_ST_fsm_state120_blk : STD_LOGIC;
    signal ap_ST_fsm_state121_blk : STD_LOGIC;
    signal ap_ST_fsm_state122_blk : STD_LOGIC;
    signal ap_ST_fsm_state123_blk : STD_LOGIC;
    signal ap_ST_fsm_state124_blk : STD_LOGIC;
    signal ap_ST_fsm_state125_blk : STD_LOGIC;
    signal ap_ST_fsm_state126_blk : STD_LOGIC;
    signal ap_ST_fsm_state127_blk : STD_LOGIC;
    signal ap_ST_fsm_state128_blk : STD_LOGIC;
    signal ap_ST_fsm_state129_blk : STD_LOGIC;
    signal ap_ST_fsm_state130_blk : STD_LOGIC;
    signal ap_ST_fsm_state131_blk : STD_LOGIC;
    signal ap_ST_fsm_state132_blk : STD_LOGIC;
    signal ap_ST_fsm_state133_blk : STD_LOGIC;
    signal ap_ST_fsm_state134_blk : STD_LOGIC;
    signal ap_ST_fsm_state135_blk : STD_LOGIC;
    signal ap_ST_fsm_state136_blk : STD_LOGIC;
    signal ap_ST_fsm_state137_blk : STD_LOGIC;
    signal ap_ST_fsm_state138_blk : STD_LOGIC;
    signal ap_ST_fsm_state139_blk : STD_LOGIC;
    signal ap_ST_fsm_state140_blk : STD_LOGIC;
    signal ap_ST_fsm_state141_blk : STD_LOGIC;
    signal ap_ST_fsm_state142_blk : STD_LOGIC;
    signal ap_ST_fsm_state143_blk : STD_LOGIC;
    signal ap_ST_fsm_state144_blk : STD_LOGIC;
    signal ap_ST_fsm_state145_blk : STD_LOGIC;
    signal ap_ST_fsm_state146_blk : STD_LOGIC;
    signal ap_ST_fsm_state147_blk : STD_LOGIC;
    signal ap_ST_fsm_state148_blk : STD_LOGIC;
    signal ap_ST_fsm_state149_blk : STD_LOGIC;
    signal ap_ST_fsm_state150_blk : STD_LOGIC;
    signal ap_ST_fsm_state151_blk : STD_LOGIC;
    signal ap_ST_fsm_state152_blk : STD_LOGIC;
    signal ap_ST_fsm_state153_blk : STD_LOGIC;
    signal grp_fu_324_p10 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_332_p10 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln97_fu_354_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln97_fu_354_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component sgemm_sgemm_Pipeline_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        Cv_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        Cv_ce0 : OUT STD_LOGIC;
        Cv_we0 : OUT STD_LOGIC;
        Cv_d0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component sgemm_sgemm_Pipeline_VITIS_LOOP_76_1_calc_loop IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_B_AWVALID : OUT STD_LOGIC;
        m_axi_B_AWREADY : IN STD_LOGIC;
        m_axi_B_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_B_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_B_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_B_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_B_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_B_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_B_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_B_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_B_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_B_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_B_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_B_WVALID : OUT STD_LOGIC;
        m_axi_B_WREADY : IN STD_LOGIC;
        m_axi_B_WDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
        m_axi_B_WSTRB : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_B_WLAST : OUT STD_LOGIC;
        m_axi_B_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_B_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_B_ARVALID : OUT STD_LOGIC;
        m_axi_B_ARREADY : IN STD_LOGIC;
        m_axi_B_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_B_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_B_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_B_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_B_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_B_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_B_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_B_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_B_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_B_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_B_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_B_RVALID : IN STD_LOGIC;
        m_axi_B_RREADY : OUT STD_LOGIC;
        m_axi_B_RDATA : IN STD_LOGIC_VECTOR (511 downto 0);
        m_axi_B_RLAST : IN STD_LOGIC;
        m_axi_B_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_B_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
        m_axi_B_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_B_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_B_BVALID : IN STD_LOGIC;
        m_axi_B_BREADY : OUT STD_LOGIC;
        m_axi_B_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_B_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_B_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_A_AWVALID : OUT STD_LOGIC;
        m_axi_A_AWREADY : IN STD_LOGIC;
        m_axi_A_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_A_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_A_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_A_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_A_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_A_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_A_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_A_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_A_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_A_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_A_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_A_WVALID : OUT STD_LOGIC;
        m_axi_A_WREADY : IN STD_LOGIC;
        m_axi_A_WDATA : OUT STD_LOGIC_VECTOR (255 downto 0);
        m_axi_A_WSTRB : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_A_WLAST : OUT STD_LOGIC;
        m_axi_A_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_A_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_A_ARVALID : OUT STD_LOGIC;
        m_axi_A_ARREADY : IN STD_LOGIC;
        m_axi_A_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_A_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_A_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_A_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_A_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_A_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_A_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_A_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_A_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_A_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_A_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_A_RVALID : IN STD_LOGIC;
        m_axi_A_RREADY : OUT STD_LOGIC;
        m_axi_A_RDATA : IN STD_LOGIC_VECTOR (255 downto 0);
        m_axi_A_RLAST : IN STD_LOGIC;
        m_axi_A_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_A_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
        m_axi_A_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_A_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_A_BVALID : IN STD_LOGIC;
        m_axi_A_BREADY : OUT STD_LOGIC;
        m_axi_A_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_A_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_A_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        RM : IN STD_LOGIC_VECTOR (7 downto 0);
        mul_ln97 : IN STD_LOGIC_VECTOR (15 downto 0);
        add_ln70 : IN STD_LOGIC_VECTOR (62 downto 0);
        empty_27 : IN STD_LOGIC_VECTOR (62 downto 0);
        zext_ln72 : IN STD_LOGIC_VECTOR (30 downto 0);
        B_offset : IN STD_LOGIC_VECTOR (63 downto 0);
        Cv_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        Cv_ce0 : OUT STD_LOGIC;
        Cv_we0 : OUT STD_LOGIC;
        Cv_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        Cv_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        add_ln69 : IN STD_LOGIC_VECTOR (62 downto 0);
        empty : IN STD_LOGIC_VECTOR (62 downto 0);
        A_offset : IN STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component sgemm_sgemm_Pipeline_VITIS_LOOP_87_2_VITIS_LOOP_89_3 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_C_AWVALID : OUT STD_LOGIC;
        m_axi_C_AWREADY : IN STD_LOGIC;
        m_axi_C_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_C_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_C_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_C_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_C_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_C_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_C_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_C_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_C_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_C_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_C_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_C_WVALID : OUT STD_LOGIC;
        m_axi_C_WREADY : IN STD_LOGIC;
        m_axi_C_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_C_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_C_WLAST : OUT STD_LOGIC;
        m_axi_C_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_C_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_C_ARVALID : OUT STD_LOGIC;
        m_axi_C_ARREADY : IN STD_LOGIC;
        m_axi_C_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_C_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_C_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_C_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_C_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_C_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_C_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_C_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_C_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_C_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_C_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_C_RVALID : IN STD_LOGIC;
        m_axi_C_RREADY : OUT STD_LOGIC;
        m_axi_C_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_C_RLAST : IN STD_LOGIC;
        m_axi_C_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_C_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
        m_axi_C_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_C_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_C_BVALID : IN STD_LOGIC;
        m_axi_C_BREADY : OUT STD_LOGIC;
        m_axi_C_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_C_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_C_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        mul_ln97 : IN STD_LOGIC_VECTOR (15 downto 0);
        Cv_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        Cv_ce0 : OUT STD_LOGIC;
        Cv_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        RM : IN STD_LOGIC_VECTOR (7 downto 0);
        zext_ln89 : IN STD_LOGIC_VECTOR (7 downto 0);
        empty_25 : IN STD_LOGIC_VECTOR (61 downto 0);
        empty_26 : IN STD_LOGIC_VECTOR (61 downto 0);
        empty : IN STD_LOGIC_VECTOR (61 downto 0);
        C_offset : IN STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component sgemm_mul_63s_8ns_63_5_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (62 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (62 downto 0) );
    end component;


    component sgemm_mul_64s_64s_64_5_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component sgemm_sdiv_64ns_9ns_64_68_seq_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component sgemm_mul_8ns_8ns_16_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component sgemm_sdiv_64ns_64s_63_68_seq_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (62 downto 0) );
    end component;


    component sgemm_srem_64ns_64s_63_68_seq_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (62 downto 0) );
    end component;


    component sgemm_Cv_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component sgemm_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        k : OUT STD_LOGIC_VECTOR (31 downto 0);
        A_offset : OUT STD_LOGIC_VECTOR (63 downto 0);
        lda : OUT STD_LOGIC_VECTOR (63 downto 0);
        B_offset : OUT STD_LOGIC_VECTOR (63 downto 0);
        ldb : OUT STD_LOGIC_VECTOR (63 downto 0);
        C_offset : OUT STD_LOGIC_VECTOR (63 downto 0);
        ldc : OUT STD_LOGIC_VECTOR (63 downto 0);
        RM : OUT STD_LOGIC_VECTOR (7 downto 0);
        RN : OUT STD_LOGIC_VECTOR (7 downto 0);
        m0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        m : OUT STD_LOGIC_VECTOR (63 downto 0);
        n0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        n : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;


    component sgemm_A_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_MAXREQS : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER;
        USER_RFIFONUM_WIDTH : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (255 downto 0);
        I_RFIFONUM : OUT STD_LOGIC_VECTOR (8 downto 0);
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (255 downto 0);
        I_WSTRB : IN STD_LOGIC_VECTOR (31 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC );
    end component;


    component sgemm_B_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_MAXREQS : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER;
        USER_RFIFONUM_WIDTH : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
        I_RFIFONUM : OUT STD_LOGIC_VECTOR (8 downto 0);
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (511 downto 0);
        I_WSTRB : IN STD_LOGIC_VECTOR (63 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC );
    end component;


    component sgemm_C_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_MAXREQS : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER;
        USER_RFIFONUM_WIDTH : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RFIFONUM : OUT STD_LOGIC_VECTOR (8 downto 0);
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC );
    end component;



begin
    Cv_U : component sgemm_Cv_RAM_AUTO_1R1W
    generic map (
        DataWidth => 16,
        AddressRange => 9,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => Cv_address0,
        ce0 => Cv_ce0,
        we0 => Cv_we0,
        d0 => Cv_d0,
        q0 => Cv_q0);

    grp_sgemm_Pipeline_1_fu_234 : component sgemm_sgemm_Pipeline_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_sgemm_Pipeline_1_fu_234_ap_start,
        ap_done => grp_sgemm_Pipeline_1_fu_234_ap_done,
        ap_idle => grp_sgemm_Pipeline_1_fu_234_ap_idle,
        ap_ready => grp_sgemm_Pipeline_1_fu_234_ap_ready,
        Cv_address0 => grp_sgemm_Pipeline_1_fu_234_Cv_address0,
        Cv_ce0 => grp_sgemm_Pipeline_1_fu_234_Cv_ce0,
        Cv_we0 => grp_sgemm_Pipeline_1_fu_234_Cv_we0,
        Cv_d0 => grp_sgemm_Pipeline_1_fu_234_Cv_d0);

    grp_sgemm_Pipeline_VITIS_LOOP_76_1_calc_loop_fu_239 : component sgemm_sgemm_Pipeline_VITIS_LOOP_76_1_calc_loop
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_sgemm_Pipeline_VITIS_LOOP_76_1_calc_loop_fu_239_ap_start,
        ap_done => grp_sgemm_Pipeline_VITIS_LOOP_76_1_calc_loop_fu_239_ap_done,
        ap_idle => grp_sgemm_Pipeline_VITIS_LOOP_76_1_calc_loop_fu_239_ap_idle,
        ap_ready => grp_sgemm_Pipeline_VITIS_LOOP_76_1_calc_loop_fu_239_ap_ready,
        m_axi_B_AWVALID => grp_sgemm_Pipeline_VITIS_LOOP_76_1_calc_loop_fu_239_m_axi_B_AWVALID,
        m_axi_B_AWREADY => ap_const_logic_0,
        m_axi_B_AWADDR => grp_sgemm_Pipeline_VITIS_LOOP_76_1_calc_loop_fu_239_m_axi_B_AWADDR,
        m_axi_B_AWID => grp_sgemm_Pipeline_VITIS_LOOP_76_1_calc_loop_fu_239_m_axi_B_AWID,
        m_axi_B_AWLEN => grp_sgemm_Pipeline_VITIS_LOOP_76_1_calc_loop_fu_239_m_axi_B_AWLEN,
        m_axi_B_AWSIZE => grp_sgemm_Pipeline_VITIS_LOOP_76_1_calc_loop_fu_239_m_axi_B_AWSIZE,
        m_axi_B_AWBURST => grp_sgemm_Pipeline_VITIS_LOOP_76_1_calc_loop_fu_239_m_axi_B_AWBURST,
        m_axi_B_AWLOCK => grp_sgemm_Pipeline_VITIS_LOOP_76_1_calc_loop_fu_239_m_axi_B_AWLOCK,
        m_axi_B_AWCACHE => grp_sgemm_Pipeline_VITIS_LOOP_76_1_calc_loop_fu_239_m_axi_B_AWCACHE,
        m_axi_B_AWPROT => grp_sgemm_Pipeline_VITIS_LOOP_76_1_calc_loop_fu_239_m_axi_B_AWPROT,
        m_axi_B_AWQOS => grp_sgemm_Pipeline_VITIS_LOOP_76_1_calc_loop_fu_239_m_axi_B_AWQOS,
        m_axi_B_AWREGION => grp_sgemm_Pipeline_VITIS_LOOP_76_1_calc_loop_fu_239_m_axi_B_AWREGION,
        m_axi_B_AWUSER => grp_sgemm_Pipeline_VITIS_LOOP_76_1_calc_loop_fu_239_m_axi_B_AWUSER,
        m_axi_B_WVALID => grp_sgemm_Pipeline_VITIS_LOOP_76_1_calc_loop_fu_239_m_axi_B_WVALID,
        m_axi_B_WREADY => ap_const_logic_0,
        m_axi_B_WDATA => grp_sgemm_Pipeline_VITIS_LOOP_76_1_calc_loop_fu_239_m_axi_B_WDATA,
        m_axi_B_WSTRB => grp_sgemm_Pipeline_VITIS_LOOP_76_1_calc_loop_fu_239_m_axi_B_WSTRB,
        m_axi_B_WLAST => grp_sgemm_Pipeline_VITIS_LOOP_76_1_calc_loop_fu_239_m_axi_B_WLAST,
        m_axi_B_WID => grp_sgemm_Pipeline_VITIS_LOOP_76_1_calc_loop_fu_239_m_axi_B_WID,
        m_axi_B_WUSER => grp_sgemm_Pipeline_VITIS_LOOP_76_1_calc_loop_fu_239_m_axi_B_WUSER,
        m_axi_B_ARVALID => grp_sgemm_Pipeline_VITIS_LOOP_76_1_calc_loop_fu_239_m_axi_B_ARVALID,
        m_axi_B_ARREADY => B_ARREADY,
        m_axi_B_ARADDR => grp_sgemm_Pipeline_VITIS_LOOP_76_1_calc_loop_fu_239_m_axi_B_ARADDR,
        m_axi_B_ARID => grp_sgemm_Pipeline_VITIS_LOOP_76_1_calc_loop_fu_239_m_axi_B_ARID,
        m_axi_B_ARLEN => grp_sgemm_Pipeline_VITIS_LOOP_76_1_calc_loop_fu_239_m_axi_B_ARLEN,
        m_axi_B_ARSIZE => grp_sgemm_Pipeline_VITIS_LOOP_76_1_calc_loop_fu_239_m_axi_B_ARSIZE,
        m_axi_B_ARBURST => grp_sgemm_Pipeline_VITIS_LOOP_76_1_calc_loop_fu_239_m_axi_B_ARBURST,
        m_axi_B_ARLOCK => grp_sgemm_Pipeline_VITIS_LOOP_76_1_calc_loop_fu_239_m_axi_B_ARLOCK,
        m_axi_B_ARCACHE => grp_sgemm_Pipeline_VITIS_LOOP_76_1_calc_loop_fu_239_m_axi_B_ARCACHE,
        m_axi_B_ARPROT => grp_sgemm_Pipeline_VITIS_LOOP_76_1_calc_loop_fu_239_m_axi_B_ARPROT,
        m_axi_B_ARQOS => grp_sgemm_Pipeline_VITIS_LOOP_76_1_calc_loop_fu_239_m_axi_B_ARQOS,
        m_axi_B_ARREGION => grp_sgemm_Pipeline_VITIS_LOOP_76_1_calc_loop_fu_239_m_axi_B_ARREGION,
        m_axi_B_ARUSER => grp_sgemm_Pipeline_VITIS_LOOP_76_1_calc_loop_fu_239_m_axi_B_ARUSER,
        m_axi_B_RVALID => B_RVALID,
        m_axi_B_RREADY => grp_sgemm_Pipeline_VITIS_LOOP_76_1_calc_loop_fu_239_m_axi_B_RREADY,
        m_axi_B_RDATA => B_RDATA,
        m_axi_B_RLAST => ap_const_logic_0,
        m_axi_B_RID => ap_const_lv1_0,
        m_axi_B_RFIFONUM => B_RFIFONUM,
        m_axi_B_RUSER => ap_const_lv1_0,
        m_axi_B_RRESP => ap_const_lv2_0,
        m_axi_B_BVALID => ap_const_logic_0,
        m_axi_B_BREADY => grp_sgemm_Pipeline_VITIS_LOOP_76_1_calc_loop_fu_239_m_axi_B_BREADY,
        m_axi_B_BRESP => ap_const_lv2_0,
        m_axi_B_BID => ap_const_lv1_0,
        m_axi_B_BUSER => ap_const_lv1_0,
        m_axi_A_AWVALID => grp_sgemm_Pipeline_VITIS_LOOP_76_1_calc_loop_fu_239_m_axi_A_AWVALID,
        m_axi_A_AWREADY => ap_const_logic_0,
        m_axi_A_AWADDR => grp_sgemm_Pipeline_VITIS_LOOP_76_1_calc_loop_fu_239_m_axi_A_AWADDR,
        m_axi_A_AWID => grp_sgemm_Pipeline_VITIS_LOOP_76_1_calc_loop_fu_239_m_axi_A_AWID,
        m_axi_A_AWLEN => grp_sgemm_Pipeline_VITIS_LOOP_76_1_calc_loop_fu_239_m_axi_A_AWLEN,
        m_axi_A_AWSIZE => grp_sgemm_Pipeline_VITIS_LOOP_76_1_calc_loop_fu_239_m_axi_A_AWSIZE,
        m_axi_A_AWBURST => grp_sgemm_Pipeline_VITIS_LOOP_76_1_calc_loop_fu_239_m_axi_A_AWBURST,
        m_axi_A_AWLOCK => grp_sgemm_Pipeline_VITIS_LOOP_76_1_calc_loop_fu_239_m_axi_A_AWLOCK,
        m_axi_A_AWCACHE => grp_sgemm_Pipeline_VITIS_LOOP_76_1_calc_loop_fu_239_m_axi_A_AWCACHE,
        m_axi_A_AWPROT => grp_sgemm_Pipeline_VITIS_LOOP_76_1_calc_loop_fu_239_m_axi_A_AWPROT,
        m_axi_A_AWQOS => grp_sgemm_Pipeline_VITIS_LOOP_76_1_calc_loop_fu_239_m_axi_A_AWQOS,
        m_axi_A_AWREGION => grp_sgemm_Pipeline_VITIS_LOOP_76_1_calc_loop_fu_239_m_axi_A_AWREGION,
        m_axi_A_AWUSER => grp_sgemm_Pipeline_VITIS_LOOP_76_1_calc_loop_fu_239_m_axi_A_AWUSER,
        m_axi_A_WVALID => grp_sgemm_Pipeline_VITIS_LOOP_76_1_calc_loop_fu_239_m_axi_A_WVALID,
        m_axi_A_WREADY => ap_const_logic_0,
        m_axi_A_WDATA => grp_sgemm_Pipeline_VITIS_LOOP_76_1_calc_loop_fu_239_m_axi_A_WDATA,
        m_axi_A_WSTRB => grp_sgemm_Pipeline_VITIS_LOOP_76_1_calc_loop_fu_239_m_axi_A_WSTRB,
        m_axi_A_WLAST => grp_sgemm_Pipeline_VITIS_LOOP_76_1_calc_loop_fu_239_m_axi_A_WLAST,
        m_axi_A_WID => grp_sgemm_Pipeline_VITIS_LOOP_76_1_calc_loop_fu_239_m_axi_A_WID,
        m_axi_A_WUSER => grp_sgemm_Pipeline_VITIS_LOOP_76_1_calc_loop_fu_239_m_axi_A_WUSER,
        m_axi_A_ARVALID => grp_sgemm_Pipeline_VITIS_LOOP_76_1_calc_loop_fu_239_m_axi_A_ARVALID,
        m_axi_A_ARREADY => A_ARREADY,
        m_axi_A_ARADDR => grp_sgemm_Pipeline_VITIS_LOOP_76_1_calc_loop_fu_239_m_axi_A_ARADDR,
        m_axi_A_ARID => grp_sgemm_Pipeline_VITIS_LOOP_76_1_calc_loop_fu_239_m_axi_A_ARID,
        m_axi_A_ARLEN => grp_sgemm_Pipeline_VITIS_LOOP_76_1_calc_loop_fu_239_m_axi_A_ARLEN,
        m_axi_A_ARSIZE => grp_sgemm_Pipeline_VITIS_LOOP_76_1_calc_loop_fu_239_m_axi_A_ARSIZE,
        m_axi_A_ARBURST => grp_sgemm_Pipeline_VITIS_LOOP_76_1_calc_loop_fu_239_m_axi_A_ARBURST,
        m_axi_A_ARLOCK => grp_sgemm_Pipeline_VITIS_LOOP_76_1_calc_loop_fu_239_m_axi_A_ARLOCK,
        m_axi_A_ARCACHE => grp_sgemm_Pipeline_VITIS_LOOP_76_1_calc_loop_fu_239_m_axi_A_ARCACHE,
        m_axi_A_ARPROT => grp_sgemm_Pipeline_VITIS_LOOP_76_1_calc_loop_fu_239_m_axi_A_ARPROT,
        m_axi_A_ARQOS => grp_sgemm_Pipeline_VITIS_LOOP_76_1_calc_loop_fu_239_m_axi_A_ARQOS,
        m_axi_A_ARREGION => grp_sgemm_Pipeline_VITIS_LOOP_76_1_calc_loop_fu_239_m_axi_A_ARREGION,
        m_axi_A_ARUSER => grp_sgemm_Pipeline_VITIS_LOOP_76_1_calc_loop_fu_239_m_axi_A_ARUSER,
        m_axi_A_RVALID => A_RVALID,
        m_axi_A_RREADY => grp_sgemm_Pipeline_VITIS_LOOP_76_1_calc_loop_fu_239_m_axi_A_RREADY,
        m_axi_A_RDATA => A_RDATA,
        m_axi_A_RLAST => ap_const_logic_0,
        m_axi_A_RID => ap_const_lv1_0,
        m_axi_A_RFIFONUM => A_RFIFONUM,
        m_axi_A_RUSER => ap_const_lv1_0,
        m_axi_A_RRESP => ap_const_lv2_0,
        m_axi_A_BVALID => ap_const_logic_0,
        m_axi_A_BREADY => grp_sgemm_Pipeline_VITIS_LOOP_76_1_calc_loop_fu_239_m_axi_A_BREADY,
        m_axi_A_BRESP => ap_const_lv2_0,
        m_axi_A_BID => ap_const_lv1_0,
        m_axi_A_BUSER => ap_const_lv1_0,
        RM => RM_read_reg_446,
        mul_ln97 => mul_ln97_reg_552,
        add_ln70 => add_ln70_reg_612,
        empty_27 => trunc_ln97_2_reg_486,
        zext_ln72 => l_reg_222,
        B_offset => B_offset_read_reg_461,
        Cv_address0 => grp_sgemm_Pipeline_VITIS_LOOP_76_1_calc_loop_fu_239_Cv_address0,
        Cv_ce0 => grp_sgemm_Pipeline_VITIS_LOOP_76_1_calc_loop_fu_239_Cv_ce0,
        Cv_we0 => grp_sgemm_Pipeline_VITIS_LOOP_76_1_calc_loop_fu_239_Cv_we0,
        Cv_d0 => grp_sgemm_Pipeline_VITIS_LOOP_76_1_calc_loop_fu_239_Cv_d0,
        Cv_q0 => Cv_q0,
        add_ln69 => add_ln69_reg_602,
        empty => trunc_ln97_reg_476,
        A_offset => A_offset_read_reg_466);

    grp_sgemm_Pipeline_VITIS_LOOP_87_2_VITIS_LOOP_89_3_fu_258 : component sgemm_sgemm_Pipeline_VITIS_LOOP_87_2_VITIS_LOOP_89_3
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_sgemm_Pipeline_VITIS_LOOP_87_2_VITIS_LOOP_89_3_fu_258_ap_start,
        ap_done => grp_sgemm_Pipeline_VITIS_LOOP_87_2_VITIS_LOOP_89_3_fu_258_ap_done,
        ap_idle => grp_sgemm_Pipeline_VITIS_LOOP_87_2_VITIS_LOOP_89_3_fu_258_ap_idle,
        ap_ready => grp_sgemm_Pipeline_VITIS_LOOP_87_2_VITIS_LOOP_89_3_fu_258_ap_ready,
        m_axi_C_AWVALID => grp_sgemm_Pipeline_VITIS_LOOP_87_2_VITIS_LOOP_89_3_fu_258_m_axi_C_AWVALID,
        m_axi_C_AWREADY => C_AWREADY,
        m_axi_C_AWADDR => grp_sgemm_Pipeline_VITIS_LOOP_87_2_VITIS_LOOP_89_3_fu_258_m_axi_C_AWADDR,
        m_axi_C_AWID => grp_sgemm_Pipeline_VITIS_LOOP_87_2_VITIS_LOOP_89_3_fu_258_m_axi_C_AWID,
        m_axi_C_AWLEN => grp_sgemm_Pipeline_VITIS_LOOP_87_2_VITIS_LOOP_89_3_fu_258_m_axi_C_AWLEN,
        m_axi_C_AWSIZE => grp_sgemm_Pipeline_VITIS_LOOP_87_2_VITIS_LOOP_89_3_fu_258_m_axi_C_AWSIZE,
        m_axi_C_AWBURST => grp_sgemm_Pipeline_VITIS_LOOP_87_2_VITIS_LOOP_89_3_fu_258_m_axi_C_AWBURST,
        m_axi_C_AWLOCK => grp_sgemm_Pipeline_VITIS_LOOP_87_2_VITIS_LOOP_89_3_fu_258_m_axi_C_AWLOCK,
        m_axi_C_AWCACHE => grp_sgemm_Pipeline_VITIS_LOOP_87_2_VITIS_LOOP_89_3_fu_258_m_axi_C_AWCACHE,
        m_axi_C_AWPROT => grp_sgemm_Pipeline_VITIS_LOOP_87_2_VITIS_LOOP_89_3_fu_258_m_axi_C_AWPROT,
        m_axi_C_AWQOS => grp_sgemm_Pipeline_VITIS_LOOP_87_2_VITIS_LOOP_89_3_fu_258_m_axi_C_AWQOS,
        m_axi_C_AWREGION => grp_sgemm_Pipeline_VITIS_LOOP_87_2_VITIS_LOOP_89_3_fu_258_m_axi_C_AWREGION,
        m_axi_C_AWUSER => grp_sgemm_Pipeline_VITIS_LOOP_87_2_VITIS_LOOP_89_3_fu_258_m_axi_C_AWUSER,
        m_axi_C_WVALID => grp_sgemm_Pipeline_VITIS_LOOP_87_2_VITIS_LOOP_89_3_fu_258_m_axi_C_WVALID,
        m_axi_C_WREADY => C_WREADY,
        m_axi_C_WDATA => grp_sgemm_Pipeline_VITIS_LOOP_87_2_VITIS_LOOP_89_3_fu_258_m_axi_C_WDATA,
        m_axi_C_WSTRB => grp_sgemm_Pipeline_VITIS_LOOP_87_2_VITIS_LOOP_89_3_fu_258_m_axi_C_WSTRB,
        m_axi_C_WLAST => grp_sgemm_Pipeline_VITIS_LOOP_87_2_VITIS_LOOP_89_3_fu_258_m_axi_C_WLAST,
        m_axi_C_WID => grp_sgemm_Pipeline_VITIS_LOOP_87_2_VITIS_LOOP_89_3_fu_258_m_axi_C_WID,
        m_axi_C_WUSER => grp_sgemm_Pipeline_VITIS_LOOP_87_2_VITIS_LOOP_89_3_fu_258_m_axi_C_WUSER,
        m_axi_C_ARVALID => grp_sgemm_Pipeline_VITIS_LOOP_87_2_VITIS_LOOP_89_3_fu_258_m_axi_C_ARVALID,
        m_axi_C_ARREADY => ap_const_logic_0,
        m_axi_C_ARADDR => grp_sgemm_Pipeline_VITIS_LOOP_87_2_VITIS_LOOP_89_3_fu_258_m_axi_C_ARADDR,
        m_axi_C_ARID => grp_sgemm_Pipeline_VITIS_LOOP_87_2_VITIS_LOOP_89_3_fu_258_m_axi_C_ARID,
        m_axi_C_ARLEN => grp_sgemm_Pipeline_VITIS_LOOP_87_2_VITIS_LOOP_89_3_fu_258_m_axi_C_ARLEN,
        m_axi_C_ARSIZE => grp_sgemm_Pipeline_VITIS_LOOP_87_2_VITIS_LOOP_89_3_fu_258_m_axi_C_ARSIZE,
        m_axi_C_ARBURST => grp_sgemm_Pipeline_VITIS_LOOP_87_2_VITIS_LOOP_89_3_fu_258_m_axi_C_ARBURST,
        m_axi_C_ARLOCK => grp_sgemm_Pipeline_VITIS_LOOP_87_2_VITIS_LOOP_89_3_fu_258_m_axi_C_ARLOCK,
        m_axi_C_ARCACHE => grp_sgemm_Pipeline_VITIS_LOOP_87_2_VITIS_LOOP_89_3_fu_258_m_axi_C_ARCACHE,
        m_axi_C_ARPROT => grp_sgemm_Pipeline_VITIS_LOOP_87_2_VITIS_LOOP_89_3_fu_258_m_axi_C_ARPROT,
        m_axi_C_ARQOS => grp_sgemm_Pipeline_VITIS_LOOP_87_2_VITIS_LOOP_89_3_fu_258_m_axi_C_ARQOS,
        m_axi_C_ARREGION => grp_sgemm_Pipeline_VITIS_LOOP_87_2_VITIS_LOOP_89_3_fu_258_m_axi_C_ARREGION,
        m_axi_C_ARUSER => grp_sgemm_Pipeline_VITIS_LOOP_87_2_VITIS_LOOP_89_3_fu_258_m_axi_C_ARUSER,
        m_axi_C_RVALID => ap_const_logic_0,
        m_axi_C_RREADY => grp_sgemm_Pipeline_VITIS_LOOP_87_2_VITIS_LOOP_89_3_fu_258_m_axi_C_RREADY,
        m_axi_C_RDATA => ap_const_lv32_0,
        m_axi_C_RLAST => ap_const_logic_0,
        m_axi_C_RID => ap_const_lv1_0,
        m_axi_C_RFIFONUM => ap_const_lv9_0,
        m_axi_C_RUSER => ap_const_lv1_0,
        m_axi_C_RRESP => ap_const_lv2_0,
        m_axi_C_BVALID => C_BVALID,
        m_axi_C_BREADY => grp_sgemm_Pipeline_VITIS_LOOP_87_2_VITIS_LOOP_89_3_fu_258_m_axi_C_BREADY,
        m_axi_C_BRESP => ap_const_lv2_0,
        m_axi_C_BID => ap_const_lv1_0,
        m_axi_C_BUSER => ap_const_lv1_0,
        mul_ln97 => mul_ln97_reg_552,
        Cv_address0 => grp_sgemm_Pipeline_VITIS_LOOP_87_2_VITIS_LOOP_89_3_fu_258_Cv_address0,
        Cv_ce0 => grp_sgemm_Pipeline_VITIS_LOOP_87_2_VITIS_LOOP_89_3_fu_258_Cv_ce0,
        Cv_q0 => Cv_q0,
        RM => RM_read_reg_446,
        zext_ln89 => RM_read_reg_446,
        empty_25 => trunc_ln72_reg_617,
        empty_26 => trunc_ln97_1_reg_481,
        empty => trunc_ln70_1_reg_607,
        C_offset => C_offset_read_reg_456);

    control_s_axi_U : component sgemm_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        k => k,
        A_offset => A_offset,
        lda => lda,
        B_offset => B_offset,
        ldb => ldb,
        C_offset => C_offset,
        ldc => ldc,
        RM => RM,
        RN => RN,
        m0 => m0,
        m => m,
        n0 => n0,
        n => n,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);

    A_m_axi_U : component sgemm_A_m_axi
    generic map (
        CONSERVATIVE => 1,
        USER_MAXREQS => 7,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_A_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_A_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_A_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_A_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_A_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_A_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_A_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_A_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_A_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_A_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_A_CACHE_VALUE,
        USER_RFIFONUM_WIDTH => 9,
        USER_DW => 256,
        USER_AW => 64,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16)
    port map (
        AWVALID => m_axi_A_AWVALID,
        AWREADY => m_axi_A_AWREADY,
        AWADDR => m_axi_A_AWADDR,
        AWID => m_axi_A_AWID,
        AWLEN => m_axi_A_AWLEN,
        AWSIZE => m_axi_A_AWSIZE,
        AWBURST => m_axi_A_AWBURST,
        AWLOCK => m_axi_A_AWLOCK,
        AWCACHE => m_axi_A_AWCACHE,
        AWPROT => m_axi_A_AWPROT,
        AWQOS => m_axi_A_AWQOS,
        AWREGION => m_axi_A_AWREGION,
        AWUSER => m_axi_A_AWUSER,
        WVALID => m_axi_A_WVALID,
        WREADY => m_axi_A_WREADY,
        WDATA => m_axi_A_WDATA,
        WSTRB => m_axi_A_WSTRB,
        WLAST => m_axi_A_WLAST,
        WID => m_axi_A_WID,
        WUSER => m_axi_A_WUSER,
        ARVALID => m_axi_A_ARVALID,
        ARREADY => m_axi_A_ARREADY,
        ARADDR => m_axi_A_ARADDR,
        ARID => m_axi_A_ARID,
        ARLEN => m_axi_A_ARLEN,
        ARSIZE => m_axi_A_ARSIZE,
        ARBURST => m_axi_A_ARBURST,
        ARLOCK => m_axi_A_ARLOCK,
        ARCACHE => m_axi_A_ARCACHE,
        ARPROT => m_axi_A_ARPROT,
        ARQOS => m_axi_A_ARQOS,
        ARREGION => m_axi_A_ARREGION,
        ARUSER => m_axi_A_ARUSER,
        RVALID => m_axi_A_RVALID,
        RREADY => m_axi_A_RREADY,
        RDATA => m_axi_A_RDATA,
        RLAST => m_axi_A_RLAST,
        RID => m_axi_A_RID,
        RUSER => m_axi_A_RUSER,
        RRESP => m_axi_A_RRESP,
        BVALID => m_axi_A_BVALID,
        BREADY => m_axi_A_BREADY,
        BRESP => m_axi_A_BRESP,
        BID => m_axi_A_BID,
        BUSER => m_axi_A_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => A_ARVALID,
        I_ARREADY => A_ARREADY,
        I_ARADDR => grp_sgemm_Pipeline_VITIS_LOOP_76_1_calc_loop_fu_239_m_axi_A_ARADDR,
        I_ARLEN => grp_sgemm_Pipeline_VITIS_LOOP_76_1_calc_loop_fu_239_m_axi_A_ARLEN,
        I_RVALID => A_RVALID,
        I_RREADY => A_RREADY,
        I_RDATA => A_RDATA,
        I_RFIFONUM => A_RFIFONUM,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => A_AWREADY,
        I_AWADDR => ap_const_lv64_0,
        I_AWLEN => ap_const_lv32_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => A_WREADY,
        I_WDATA => ap_const_lv256_lc_1,
        I_WSTRB => ap_const_lv32_0,
        I_BVALID => A_BVALID,
        I_BREADY => ap_const_logic_0);

    B_m_axi_U : component sgemm_B_m_axi
    generic map (
        CONSERVATIVE => 1,
        USER_MAXREQS => 7,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_B_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_B_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_B_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_B_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_B_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_B_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_B_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_B_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_B_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_B_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_B_CACHE_VALUE,
        USER_RFIFONUM_WIDTH => 9,
        USER_DW => 512,
        USER_AW => 64,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16)
    port map (
        AWVALID => m_axi_B_AWVALID,
        AWREADY => m_axi_B_AWREADY,
        AWADDR => m_axi_B_AWADDR,
        AWID => m_axi_B_AWID,
        AWLEN => m_axi_B_AWLEN,
        AWSIZE => m_axi_B_AWSIZE,
        AWBURST => m_axi_B_AWBURST,
        AWLOCK => m_axi_B_AWLOCK,
        AWCACHE => m_axi_B_AWCACHE,
        AWPROT => m_axi_B_AWPROT,
        AWQOS => m_axi_B_AWQOS,
        AWREGION => m_axi_B_AWREGION,
        AWUSER => m_axi_B_AWUSER,
        WVALID => m_axi_B_WVALID,
        WREADY => m_axi_B_WREADY,
        WDATA => m_axi_B_WDATA,
        WSTRB => m_axi_B_WSTRB,
        WLAST => m_axi_B_WLAST,
        WID => m_axi_B_WID,
        WUSER => m_axi_B_WUSER,
        ARVALID => m_axi_B_ARVALID,
        ARREADY => m_axi_B_ARREADY,
        ARADDR => m_axi_B_ARADDR,
        ARID => m_axi_B_ARID,
        ARLEN => m_axi_B_ARLEN,
        ARSIZE => m_axi_B_ARSIZE,
        ARBURST => m_axi_B_ARBURST,
        ARLOCK => m_axi_B_ARLOCK,
        ARCACHE => m_axi_B_ARCACHE,
        ARPROT => m_axi_B_ARPROT,
        ARQOS => m_axi_B_ARQOS,
        ARREGION => m_axi_B_ARREGION,
        ARUSER => m_axi_B_ARUSER,
        RVALID => m_axi_B_RVALID,
        RREADY => m_axi_B_RREADY,
        RDATA => m_axi_B_RDATA,
        RLAST => m_axi_B_RLAST,
        RID => m_axi_B_RID,
        RUSER => m_axi_B_RUSER,
        RRESP => m_axi_B_RRESP,
        BVALID => m_axi_B_BVALID,
        BREADY => m_axi_B_BREADY,
        BRESP => m_axi_B_BRESP,
        BID => m_axi_B_BID,
        BUSER => m_axi_B_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => B_ARVALID,
        I_ARREADY => B_ARREADY,
        I_ARADDR => grp_sgemm_Pipeline_VITIS_LOOP_76_1_calc_loop_fu_239_m_axi_B_ARADDR,
        I_ARLEN => grp_sgemm_Pipeline_VITIS_LOOP_76_1_calc_loop_fu_239_m_axi_B_ARLEN,
        I_RVALID => B_RVALID,
        I_RREADY => B_RREADY,
        I_RDATA => B_RDATA,
        I_RFIFONUM => B_RFIFONUM,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => B_AWREADY,
        I_AWADDR => ap_const_lv64_0,
        I_AWLEN => ap_const_lv32_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => B_WREADY,
        I_WDATA => ap_const_lv512_lc_1,
        I_WSTRB => ap_const_lv64_0,
        I_BVALID => B_BVALID,
        I_BREADY => ap_const_logic_0);

    C_m_axi_U : component sgemm_C_m_axi
    generic map (
        CONSERVATIVE => 1,
        USER_MAXREQS => 4,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_C_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_C_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_C_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_C_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_C_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_C_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_C_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_C_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_C_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_C_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_C_CACHE_VALUE,
        USER_RFIFONUM_WIDTH => 9,
        USER_DW => 32,
        USER_AW => 64,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16)
    port map (
        AWVALID => m_axi_C_AWVALID,
        AWREADY => m_axi_C_AWREADY,
        AWADDR => m_axi_C_AWADDR,
        AWID => m_axi_C_AWID,
        AWLEN => m_axi_C_AWLEN,
        AWSIZE => m_axi_C_AWSIZE,
        AWBURST => m_axi_C_AWBURST,
        AWLOCK => m_axi_C_AWLOCK,
        AWCACHE => m_axi_C_AWCACHE,
        AWPROT => m_axi_C_AWPROT,
        AWQOS => m_axi_C_AWQOS,
        AWREGION => m_axi_C_AWREGION,
        AWUSER => m_axi_C_AWUSER,
        WVALID => m_axi_C_WVALID,
        WREADY => m_axi_C_WREADY,
        WDATA => m_axi_C_WDATA,
        WSTRB => m_axi_C_WSTRB,
        WLAST => m_axi_C_WLAST,
        WID => m_axi_C_WID,
        WUSER => m_axi_C_WUSER,
        ARVALID => m_axi_C_ARVALID,
        ARREADY => m_axi_C_ARREADY,
        ARADDR => m_axi_C_ARADDR,
        ARID => m_axi_C_ARID,
        ARLEN => m_axi_C_ARLEN,
        ARSIZE => m_axi_C_ARSIZE,
        ARBURST => m_axi_C_ARBURST,
        ARLOCK => m_axi_C_ARLOCK,
        ARCACHE => m_axi_C_ARCACHE,
        ARPROT => m_axi_C_ARPROT,
        ARQOS => m_axi_C_ARQOS,
        ARREGION => m_axi_C_ARREGION,
        ARUSER => m_axi_C_ARUSER,
        RVALID => m_axi_C_RVALID,
        RREADY => m_axi_C_RREADY,
        RDATA => m_axi_C_RDATA,
        RLAST => m_axi_C_RLAST,
        RID => m_axi_C_RID,
        RUSER => m_axi_C_RUSER,
        RRESP => m_axi_C_RRESP,
        BVALID => m_axi_C_BVALID,
        BREADY => m_axi_C_BREADY,
        BRESP => m_axi_C_BRESP,
        BID => m_axi_C_BID,
        BUSER => m_axi_C_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => ap_const_logic_0,
        I_ARREADY => C_ARREADY,
        I_ARADDR => ap_const_lv64_0,
        I_ARLEN => ap_const_lv32_0,
        I_RVALID => C_RVALID,
        I_RREADY => ap_const_logic_0,
        I_RDATA => C_RDATA,
        I_RFIFONUM => C_RFIFONUM,
        I_AWVALID => C_AWVALID,
        I_AWREADY => C_AWREADY,
        I_AWADDR => grp_sgemm_Pipeline_VITIS_LOOP_87_2_VITIS_LOOP_89_3_fu_258_m_axi_C_AWADDR,
        I_AWLEN => grp_sgemm_Pipeline_VITIS_LOOP_87_2_VITIS_LOOP_89_3_fu_258_m_axi_C_AWLEN,
        I_WVALID => C_WVALID,
        I_WREADY => C_WREADY,
        I_WDATA => grp_sgemm_Pipeline_VITIS_LOOP_87_2_VITIS_LOOP_89_3_fu_258_m_axi_C_WDATA,
        I_WSTRB => grp_sgemm_Pipeline_VITIS_LOOP_87_2_VITIS_LOOP_89_3_fu_258_m_axi_C_WSTRB,
        I_BVALID => C_BVALID,
        I_BREADY => C_BREADY);

    mul_63s_8ns_63_5_1_U52 : component sgemm_mul_63s_8ns_63_5_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 63,
        din1_WIDTH => 8,
        dout_WIDTH => 63)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_272_p0,
        din1 => grp_fu_272_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_272_p2);

    mul_63s_8ns_63_5_1_U53 : component sgemm_mul_63s_8ns_63_5_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 63,
        din1_WIDTH => 8,
        dout_WIDTH => 63)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_276_p0,
        din1 => grp_fu_276_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_276_p2);

    mul_64s_64s_64_5_1_U54 : component sgemm_mul_64s_64s_64_5_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => xtiles_reg_526,
        din1 => ytiles_reg_521,
        ce => ap_const_logic_1,
        dout => grp_fu_280_p2);

    sdiv_64ns_9ns_64_68_seq_1_U55 : component sgemm_sdiv_64ns_9ns_64_68_seq_1
    generic map (
        ID => 1,
        NUM_STAGE => 68,
        din0_WIDTH => 64,
        din1_WIDTH => 9,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        start => grp_fu_324_ap_start,
        done => grp_fu_324_ap_done,
        din0 => sub_ln58_reg_501,
        din1 => grp_fu_324_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_324_p2);

    sdiv_64ns_9ns_64_68_seq_1_U56 : component sgemm_sdiv_64ns_9ns_64_68_seq_1
    generic map (
        ID => 1,
        NUM_STAGE => 68,
        din0_WIDTH => 64,
        din1_WIDTH => 9,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        start => grp_fu_332_ap_start,
        done => grp_fu_332_ap_done,
        din0 => sub_ln59_reg_506,
        din1 => grp_fu_332_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_332_p2);

    mul_8ns_8ns_16_1_1_U57 : component sgemm_mul_8ns_8ns_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        din0 => mul_ln97_fu_354_p0,
        din1 => mul_ln97_fu_354_p1,
        dout => mul_ln97_fu_354_p2);

    sdiv_64ns_64s_63_68_seq_1_U58 : component sgemm_sdiv_64ns_64s_63_68_seq_1
    generic map (
        ID => 1,
        NUM_STAGE => 68,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 63)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        start => grp_fu_378_ap_start,
        done => grp_fu_378_ap_done,
        din0 => zext_ln67_fu_363_p1,
        din1 => xtiles_reg_526,
        ce => grp_fu_378_ce,
        dout => grp_fu_378_p2);

    srem_64ns_64s_63_68_seq_1_U59 : component sgemm_srem_64ns_64s_63_68_seq_1
    generic map (
        ID => 1,
        NUM_STAGE => 68,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 63)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        start => grp_fu_383_ap_start,
        done => grp_fu_383_ap_done,
        din0 => zext_ln67_fu_363_p1,
        din1 => xtiles_reg_526,
        ce => grp_fu_383_ce,
        dout => grp_fu_383_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_sgemm_Pipeline_1_fu_234_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_sgemm_Pipeline_1_fu_234_ap_start_reg <= ap_const_logic_0;
            else
                if (((icmp_ln67_fu_367_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state75))) then 
                    grp_sgemm_Pipeline_1_fu_234_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_sgemm_Pipeline_1_fu_234_ap_ready = ap_const_logic_1)) then 
                    grp_sgemm_Pipeline_1_fu_234_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_sgemm_Pipeline_VITIS_LOOP_76_1_calc_loop_fu_239_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_sgemm_Pipeline_VITIS_LOOP_76_1_calc_loop_fu_239_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state150)) then 
                    grp_sgemm_Pipeline_VITIS_LOOP_76_1_calc_loop_fu_239_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_sgemm_Pipeline_VITIS_LOOP_76_1_calc_loop_fu_239_ap_ready = ap_const_logic_1)) then 
                    grp_sgemm_Pipeline_VITIS_LOOP_76_1_calc_loop_fu_239_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_sgemm_Pipeline_VITIS_LOOP_87_2_VITIS_LOOP_89_3_fu_258_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_sgemm_Pipeline_VITIS_LOOP_87_2_VITIS_LOOP_89_3_fu_258_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state152)) then 
                    grp_sgemm_Pipeline_VITIS_LOOP_87_2_VITIS_LOOP_89_3_fu_258_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_sgemm_Pipeline_VITIS_LOOP_87_2_VITIS_LOOP_89_3_fu_258_ap_ready = ap_const_logic_1)) then 
                    grp_sgemm_Pipeline_VITIS_LOOP_87_2_VITIS_LOOP_89_3_fu_258_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    job_fu_136_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                job_fu_136 <= ap_const_lv63_0;
            elsif (((icmp_ln72_fu_416_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state149))) then 
                job_fu_136 <= job_2_reg_567;
            end if; 
        end if;
    end process;

    l_reg_222_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state153_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state153))) then 
                l_reg_222 <= l_1_reg_625;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state148)) then 
                l_reg_222 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                A_offset_read_reg_466 <= A_offset;
                B_offset_read_reg_461 <= B_offset;
                C_offset_read_reg_456 <= C_offset;
                RM_read_reg_446 <= RM;
                RN_read_reg_438 <= RN;
                k_read_reg_471 <= k;
                sub_ln58_reg_501 <= sub_ln58_fu_304_p2;
                sub_ln59_reg_506 <= sub_ln59_fu_310_p2;
                trunc_ln97_1_reg_481 <= trunc_ln97_1_fu_288_p1;
                trunc_ln97_2_reg_486 <= trunc_ln97_2_fu_292_p1;
                trunc_ln97_3_reg_491 <= trunc_ln97_3_fu_296_p1;
                trunc_ln97_4_reg_496 <= trunc_ln97_4_fu_300_p1;
                trunc_ln97_reg_476 <= trunc_ln97_fu_284_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state148)) then
                add_ln69_reg_602 <= add_ln69_fu_396_p2;
                add_ln70_reg_612 <= add_ln70_fu_404_p2;
                trunc_ln70_1_reg_607 <= trunc_ln70_1_fu_400_p1;
                trunc_ln72_reg_617 <= trunc_ln72_fu_408_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state74)) then
                cmp257_i_reg_548 <= cmp257_i_fu_343_p2;
                mul_ln97_reg_552 <= mul_ln97_fu_354_p2;
                tiles_reg_543 <= grp_fu_280_p2;
                    zext_ln58_1_reg_533(7 downto 0) <= zext_ln58_1_fu_337_p1(7 downto 0);
                    zext_ln59_1_reg_538(7 downto 0) <= zext_ln59_1_fu_340_p1(7 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state75)) then
                job_2_reg_567 <= job_2_fu_372_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state149)) then
                l_1_reg_625 <= l_1_fu_421_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state147)) then
                mul_ln69_reg_592 <= grp_fu_272_p2;
                mul_ln70_reg_597 <= grp_fu_276_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state142)) then
                sdiv_ln69_reg_572 <= grp_fu_378_p2;
                srem_ln70_reg_577 <= grp_fu_383_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state69)) then
                xtiles_reg_526 <= grp_fu_332_p2;
                ytiles_reg_521 <= grp_fu_324_p2;
            end if;
        end if;
    end process;
    zext_ln58_1_reg_533(62 downto 8) <= "0000000000000000000000000000000000000000000000000000000";
    zext_ln59_1_reg_538(62 downto 8) <= "0000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, cmp257_i_reg_548, ap_CS_fsm_state75, ap_CS_fsm_state149, grp_sgemm_Pipeline_1_fu_234_ap_done, grp_sgemm_Pipeline_VITIS_LOOP_76_1_calc_loop_fu_239_ap_done, ap_CS_fsm_state153, ap_block_state153_on_subcall_done, icmp_ln67_fu_367_p2, ap_CS_fsm_state76, ap_CS_fsm_state151, icmp_ln72_fu_416_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_state67;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_state68;
            when ap_ST_fsm_state68 => 
                ap_NS_fsm <= ap_ST_fsm_state69;
            when ap_ST_fsm_state69 => 
                ap_NS_fsm <= ap_ST_fsm_state70;
            when ap_ST_fsm_state70 => 
                ap_NS_fsm <= ap_ST_fsm_state71;
            when ap_ST_fsm_state71 => 
                ap_NS_fsm <= ap_ST_fsm_state72;
            when ap_ST_fsm_state72 => 
                ap_NS_fsm <= ap_ST_fsm_state73;
            when ap_ST_fsm_state73 => 
                ap_NS_fsm <= ap_ST_fsm_state74;
            when ap_ST_fsm_state74 => 
                ap_NS_fsm <= ap_ST_fsm_state75;
            when ap_ST_fsm_state75 => 
                if (((icmp_ln67_fu_367_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state75))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state76;
                end if;
            when ap_ST_fsm_state76 => 
                if (((grp_sgemm_Pipeline_1_fu_234_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state76))) then
                    ap_NS_fsm <= ap_ST_fsm_state77;
                else
                    ap_NS_fsm <= ap_ST_fsm_state76;
                end if;
            when ap_ST_fsm_state77 => 
                ap_NS_fsm <= ap_ST_fsm_state78;
            when ap_ST_fsm_state78 => 
                ap_NS_fsm <= ap_ST_fsm_state79;
            when ap_ST_fsm_state79 => 
                ap_NS_fsm <= ap_ST_fsm_state80;
            when ap_ST_fsm_state80 => 
                ap_NS_fsm <= ap_ST_fsm_state81;
            when ap_ST_fsm_state81 => 
                ap_NS_fsm <= ap_ST_fsm_state82;
            when ap_ST_fsm_state82 => 
                ap_NS_fsm <= ap_ST_fsm_state83;
            when ap_ST_fsm_state83 => 
                ap_NS_fsm <= ap_ST_fsm_state84;
            when ap_ST_fsm_state84 => 
                ap_NS_fsm <= ap_ST_fsm_state85;
            when ap_ST_fsm_state85 => 
                ap_NS_fsm <= ap_ST_fsm_state86;
            when ap_ST_fsm_state86 => 
                ap_NS_fsm <= ap_ST_fsm_state87;
            when ap_ST_fsm_state87 => 
                ap_NS_fsm <= ap_ST_fsm_state88;
            when ap_ST_fsm_state88 => 
                ap_NS_fsm <= ap_ST_fsm_state89;
            when ap_ST_fsm_state89 => 
                ap_NS_fsm <= ap_ST_fsm_state90;
            when ap_ST_fsm_state90 => 
                ap_NS_fsm <= ap_ST_fsm_state91;
            when ap_ST_fsm_state91 => 
                ap_NS_fsm <= ap_ST_fsm_state92;
            when ap_ST_fsm_state92 => 
                ap_NS_fsm <= ap_ST_fsm_state93;
            when ap_ST_fsm_state93 => 
                ap_NS_fsm <= ap_ST_fsm_state94;
            when ap_ST_fsm_state94 => 
                ap_NS_fsm <= ap_ST_fsm_state95;
            when ap_ST_fsm_state95 => 
                ap_NS_fsm <= ap_ST_fsm_state96;
            when ap_ST_fsm_state96 => 
                ap_NS_fsm <= ap_ST_fsm_state97;
            when ap_ST_fsm_state97 => 
                ap_NS_fsm <= ap_ST_fsm_state98;
            when ap_ST_fsm_state98 => 
                ap_NS_fsm <= ap_ST_fsm_state99;
            when ap_ST_fsm_state99 => 
                ap_NS_fsm <= ap_ST_fsm_state100;
            when ap_ST_fsm_state100 => 
                ap_NS_fsm <= ap_ST_fsm_state101;
            when ap_ST_fsm_state101 => 
                ap_NS_fsm <= ap_ST_fsm_state102;
            when ap_ST_fsm_state102 => 
                ap_NS_fsm <= ap_ST_fsm_state103;
            when ap_ST_fsm_state103 => 
                ap_NS_fsm <= ap_ST_fsm_state104;
            when ap_ST_fsm_state104 => 
                ap_NS_fsm <= ap_ST_fsm_state105;
            when ap_ST_fsm_state105 => 
                ap_NS_fsm <= ap_ST_fsm_state106;
            when ap_ST_fsm_state106 => 
                ap_NS_fsm <= ap_ST_fsm_state107;
            when ap_ST_fsm_state107 => 
                ap_NS_fsm <= ap_ST_fsm_state108;
            when ap_ST_fsm_state108 => 
                ap_NS_fsm <= ap_ST_fsm_state109;
            when ap_ST_fsm_state109 => 
                ap_NS_fsm <= ap_ST_fsm_state110;
            when ap_ST_fsm_state110 => 
                ap_NS_fsm <= ap_ST_fsm_state111;
            when ap_ST_fsm_state111 => 
                ap_NS_fsm <= ap_ST_fsm_state112;
            when ap_ST_fsm_state112 => 
                ap_NS_fsm <= ap_ST_fsm_state113;
            when ap_ST_fsm_state113 => 
                ap_NS_fsm <= ap_ST_fsm_state114;
            when ap_ST_fsm_state114 => 
                ap_NS_fsm <= ap_ST_fsm_state115;
            when ap_ST_fsm_state115 => 
                ap_NS_fsm <= ap_ST_fsm_state116;
            when ap_ST_fsm_state116 => 
                ap_NS_fsm <= ap_ST_fsm_state117;
            when ap_ST_fsm_state117 => 
                ap_NS_fsm <= ap_ST_fsm_state118;
            when ap_ST_fsm_state118 => 
                ap_NS_fsm <= ap_ST_fsm_state119;
            when ap_ST_fsm_state119 => 
                ap_NS_fsm <= ap_ST_fsm_state120;
            when ap_ST_fsm_state120 => 
                ap_NS_fsm <= ap_ST_fsm_state121;
            when ap_ST_fsm_state121 => 
                ap_NS_fsm <= ap_ST_fsm_state122;
            when ap_ST_fsm_state122 => 
                ap_NS_fsm <= ap_ST_fsm_state123;
            when ap_ST_fsm_state123 => 
                ap_NS_fsm <= ap_ST_fsm_state124;
            when ap_ST_fsm_state124 => 
                ap_NS_fsm <= ap_ST_fsm_state125;
            when ap_ST_fsm_state125 => 
                ap_NS_fsm <= ap_ST_fsm_state126;
            when ap_ST_fsm_state126 => 
                ap_NS_fsm <= ap_ST_fsm_state127;
            when ap_ST_fsm_state127 => 
                ap_NS_fsm <= ap_ST_fsm_state128;
            when ap_ST_fsm_state128 => 
                ap_NS_fsm <= ap_ST_fsm_state129;
            when ap_ST_fsm_state129 => 
                ap_NS_fsm <= ap_ST_fsm_state130;
            when ap_ST_fsm_state130 => 
                ap_NS_fsm <= ap_ST_fsm_state131;
            when ap_ST_fsm_state131 => 
                ap_NS_fsm <= ap_ST_fsm_state132;
            when ap_ST_fsm_state132 => 
                ap_NS_fsm <= ap_ST_fsm_state133;
            when ap_ST_fsm_state133 => 
                ap_NS_fsm <= ap_ST_fsm_state134;
            when ap_ST_fsm_state134 => 
                ap_NS_fsm <= ap_ST_fsm_state135;
            when ap_ST_fsm_state135 => 
                ap_NS_fsm <= ap_ST_fsm_state136;
            when ap_ST_fsm_state136 => 
                ap_NS_fsm <= ap_ST_fsm_state137;
            when ap_ST_fsm_state137 => 
                ap_NS_fsm <= ap_ST_fsm_state138;
            when ap_ST_fsm_state138 => 
                ap_NS_fsm <= ap_ST_fsm_state139;
            when ap_ST_fsm_state139 => 
                ap_NS_fsm <= ap_ST_fsm_state140;
            when ap_ST_fsm_state140 => 
                ap_NS_fsm <= ap_ST_fsm_state141;
            when ap_ST_fsm_state141 => 
                ap_NS_fsm <= ap_ST_fsm_state142;
            when ap_ST_fsm_state142 => 
                ap_NS_fsm <= ap_ST_fsm_state143;
            when ap_ST_fsm_state143 => 
                ap_NS_fsm <= ap_ST_fsm_state144;
            when ap_ST_fsm_state144 => 
                ap_NS_fsm <= ap_ST_fsm_state145;
            when ap_ST_fsm_state145 => 
                ap_NS_fsm <= ap_ST_fsm_state146;
            when ap_ST_fsm_state146 => 
                ap_NS_fsm <= ap_ST_fsm_state147;
            when ap_ST_fsm_state147 => 
                ap_NS_fsm <= ap_ST_fsm_state148;
            when ap_ST_fsm_state148 => 
                ap_NS_fsm <= ap_ST_fsm_state149;
            when ap_ST_fsm_state149 => 
                if (((icmp_ln72_fu_416_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state149))) then
                    ap_NS_fsm <= ap_ST_fsm_state75;
                elsif (((icmp_ln72_fu_416_p2 = ap_const_lv1_1) and (cmp257_i_reg_548 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state149))) then
                    ap_NS_fsm <= ap_ST_fsm_state153;
                else
                    ap_NS_fsm <= ap_ST_fsm_state150;
                end if;
            when ap_ST_fsm_state150 => 
                ap_NS_fsm <= ap_ST_fsm_state151;
            when ap_ST_fsm_state151 => 
                if (((grp_sgemm_Pipeline_VITIS_LOOP_76_1_calc_loop_fu_239_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state151))) then
                    ap_NS_fsm <= ap_ST_fsm_state152;
                else
                    ap_NS_fsm <= ap_ST_fsm_state151;
                end if;
            when ap_ST_fsm_state152 => 
                ap_NS_fsm <= ap_ST_fsm_state153;
            when ap_ST_fsm_state153 => 
                if (((ap_const_boolean_0 = ap_block_state153_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state153))) then
                    ap_NS_fsm <= ap_ST_fsm_state149;
                else
                    ap_NS_fsm <= ap_ST_fsm_state153;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    A_ARVALID_assign_proc : process(grp_sgemm_Pipeline_VITIS_LOOP_76_1_calc_loop_fu_239_m_axi_A_ARVALID, ap_CS_fsm_state150, ap_CS_fsm_state151)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state151) or (ap_const_logic_1 = ap_CS_fsm_state150))) then 
            A_ARVALID <= grp_sgemm_Pipeline_VITIS_LOOP_76_1_calc_loop_fu_239_m_axi_A_ARVALID;
        else 
            A_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    A_RREADY_assign_proc : process(grp_sgemm_Pipeline_VITIS_LOOP_76_1_calc_loop_fu_239_m_axi_A_RREADY, ap_CS_fsm_state150, ap_CS_fsm_state151)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state151) or (ap_const_logic_1 = ap_CS_fsm_state150))) then 
            A_RREADY <= grp_sgemm_Pipeline_VITIS_LOOP_76_1_calc_loop_fu_239_m_axi_A_RREADY;
        else 
            A_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    B_ARVALID_assign_proc : process(grp_sgemm_Pipeline_VITIS_LOOP_76_1_calc_loop_fu_239_m_axi_B_ARVALID, ap_CS_fsm_state150, ap_CS_fsm_state151)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state151) or (ap_const_logic_1 = ap_CS_fsm_state150))) then 
            B_ARVALID <= grp_sgemm_Pipeline_VITIS_LOOP_76_1_calc_loop_fu_239_m_axi_B_ARVALID;
        else 
            B_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    B_RREADY_assign_proc : process(grp_sgemm_Pipeline_VITIS_LOOP_76_1_calc_loop_fu_239_m_axi_B_RREADY, ap_CS_fsm_state150, ap_CS_fsm_state151)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state151) or (ap_const_logic_1 = ap_CS_fsm_state150))) then 
            B_RREADY <= grp_sgemm_Pipeline_VITIS_LOOP_76_1_calc_loop_fu_239_m_axi_B_RREADY;
        else 
            B_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    C_AWVALID_assign_proc : process(cmp257_i_reg_548, grp_sgemm_Pipeline_VITIS_LOOP_87_2_VITIS_LOOP_89_3_fu_258_m_axi_C_AWVALID, ap_CS_fsm_state153, ap_CS_fsm_state152)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state152) or ((cmp257_i_reg_548 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state153)))) then 
            C_AWVALID <= grp_sgemm_Pipeline_VITIS_LOOP_87_2_VITIS_LOOP_89_3_fu_258_m_axi_C_AWVALID;
        else 
            C_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    C_BREADY_assign_proc : process(cmp257_i_reg_548, grp_sgemm_Pipeline_VITIS_LOOP_87_2_VITIS_LOOP_89_3_fu_258_m_axi_C_BREADY, ap_CS_fsm_state153, ap_CS_fsm_state152)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state152) or ((cmp257_i_reg_548 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state153)))) then 
            C_BREADY <= grp_sgemm_Pipeline_VITIS_LOOP_87_2_VITIS_LOOP_89_3_fu_258_m_axi_C_BREADY;
        else 
            C_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    C_WVALID_assign_proc : process(cmp257_i_reg_548, grp_sgemm_Pipeline_VITIS_LOOP_87_2_VITIS_LOOP_89_3_fu_258_m_axi_C_WVALID, ap_CS_fsm_state153, ap_CS_fsm_state152)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state152) or ((cmp257_i_reg_548 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state153)))) then 
            C_WVALID <= grp_sgemm_Pipeline_VITIS_LOOP_87_2_VITIS_LOOP_89_3_fu_258_m_axi_C_WVALID;
        else 
            C_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    Cv_address0_assign_proc : process(cmp257_i_reg_548, grp_sgemm_Pipeline_1_fu_234_Cv_address0, grp_sgemm_Pipeline_VITIS_LOOP_76_1_calc_loop_fu_239_Cv_address0, grp_sgemm_Pipeline_VITIS_LOOP_87_2_VITIS_LOOP_89_3_fu_258_Cv_address0, ap_CS_fsm_state153, ap_CS_fsm_state76, ap_CS_fsm_state151)
    begin
        if (((cmp257_i_reg_548 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state153))) then 
            Cv_address0 <= grp_sgemm_Pipeline_VITIS_LOOP_87_2_VITIS_LOOP_89_3_fu_258_Cv_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state151)) then 
            Cv_address0 <= grp_sgemm_Pipeline_VITIS_LOOP_76_1_calc_loop_fu_239_Cv_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state76)) then 
            Cv_address0 <= grp_sgemm_Pipeline_1_fu_234_Cv_address0;
        else 
            Cv_address0 <= "XXXX";
        end if; 
    end process;


    Cv_ce0_assign_proc : process(cmp257_i_reg_548, grp_sgemm_Pipeline_1_fu_234_Cv_ce0, grp_sgemm_Pipeline_VITIS_LOOP_76_1_calc_loop_fu_239_Cv_ce0, grp_sgemm_Pipeline_VITIS_LOOP_87_2_VITIS_LOOP_89_3_fu_258_Cv_ce0, ap_CS_fsm_state153, ap_CS_fsm_state76, ap_CS_fsm_state151)
    begin
        if (((cmp257_i_reg_548 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state153))) then 
            Cv_ce0 <= grp_sgemm_Pipeline_VITIS_LOOP_87_2_VITIS_LOOP_89_3_fu_258_Cv_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state151)) then 
            Cv_ce0 <= grp_sgemm_Pipeline_VITIS_LOOP_76_1_calc_loop_fu_239_Cv_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state76)) then 
            Cv_ce0 <= grp_sgemm_Pipeline_1_fu_234_Cv_ce0;
        else 
            Cv_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    Cv_d0_assign_proc : process(grp_sgemm_Pipeline_1_fu_234_Cv_d0, grp_sgemm_Pipeline_VITIS_LOOP_76_1_calc_loop_fu_239_Cv_d0, ap_CS_fsm_state76, ap_CS_fsm_state151)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state151)) then 
            Cv_d0 <= grp_sgemm_Pipeline_VITIS_LOOP_76_1_calc_loop_fu_239_Cv_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state76)) then 
            Cv_d0 <= grp_sgemm_Pipeline_1_fu_234_Cv_d0;
        else 
            Cv_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    Cv_we0_assign_proc : process(grp_sgemm_Pipeline_1_fu_234_Cv_we0, grp_sgemm_Pipeline_VITIS_LOOP_76_1_calc_loop_fu_239_Cv_we0, ap_CS_fsm_state76, ap_CS_fsm_state151)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state151)) then 
            Cv_we0 <= grp_sgemm_Pipeline_VITIS_LOOP_76_1_calc_loop_fu_239_Cv_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state76)) then 
            Cv_we0 <= grp_sgemm_Pipeline_1_fu_234_Cv_we0;
        else 
            Cv_we0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln69_fu_396_p2 <= std_logic_vector(unsigned(mul_ln69_reg_592) + unsigned(trunc_ln97_4_reg_496));
    add_ln70_fu_404_p2 <= std_logic_vector(unsigned(mul_ln70_reg_597) + unsigned(trunc_ln97_3_reg_491));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state100 <= ap_CS_fsm(99);
    ap_CS_fsm_state101 <= ap_CS_fsm(100);
    ap_CS_fsm_state102 <= ap_CS_fsm(101);
    ap_CS_fsm_state103 <= ap_CS_fsm(102);
    ap_CS_fsm_state104 <= ap_CS_fsm(103);
    ap_CS_fsm_state105 <= ap_CS_fsm(104);
    ap_CS_fsm_state106 <= ap_CS_fsm(105);
    ap_CS_fsm_state107 <= ap_CS_fsm(106);
    ap_CS_fsm_state108 <= ap_CS_fsm(107);
    ap_CS_fsm_state109 <= ap_CS_fsm(108);
    ap_CS_fsm_state110 <= ap_CS_fsm(109);
    ap_CS_fsm_state111 <= ap_CS_fsm(110);
    ap_CS_fsm_state112 <= ap_CS_fsm(111);
    ap_CS_fsm_state113 <= ap_CS_fsm(112);
    ap_CS_fsm_state114 <= ap_CS_fsm(113);
    ap_CS_fsm_state115 <= ap_CS_fsm(114);
    ap_CS_fsm_state116 <= ap_CS_fsm(115);
    ap_CS_fsm_state117 <= ap_CS_fsm(116);
    ap_CS_fsm_state118 <= ap_CS_fsm(117);
    ap_CS_fsm_state119 <= ap_CS_fsm(118);
    ap_CS_fsm_state120 <= ap_CS_fsm(119);
    ap_CS_fsm_state121 <= ap_CS_fsm(120);
    ap_CS_fsm_state122 <= ap_CS_fsm(121);
    ap_CS_fsm_state123 <= ap_CS_fsm(122);
    ap_CS_fsm_state124 <= ap_CS_fsm(123);
    ap_CS_fsm_state125 <= ap_CS_fsm(124);
    ap_CS_fsm_state126 <= ap_CS_fsm(125);
    ap_CS_fsm_state127 <= ap_CS_fsm(126);
    ap_CS_fsm_state128 <= ap_CS_fsm(127);
    ap_CS_fsm_state129 <= ap_CS_fsm(128);
    ap_CS_fsm_state130 <= ap_CS_fsm(129);
    ap_CS_fsm_state131 <= ap_CS_fsm(130);
    ap_CS_fsm_state132 <= ap_CS_fsm(131);
    ap_CS_fsm_state133 <= ap_CS_fsm(132);
    ap_CS_fsm_state134 <= ap_CS_fsm(133);
    ap_CS_fsm_state135 <= ap_CS_fsm(134);
    ap_CS_fsm_state136 <= ap_CS_fsm(135);
    ap_CS_fsm_state137 <= ap_CS_fsm(136);
    ap_CS_fsm_state138 <= ap_CS_fsm(137);
    ap_CS_fsm_state139 <= ap_CS_fsm(138);
    ap_CS_fsm_state140 <= ap_CS_fsm(139);
    ap_CS_fsm_state141 <= ap_CS_fsm(140);
    ap_CS_fsm_state142 <= ap_CS_fsm(141);
    ap_CS_fsm_state143 <= ap_CS_fsm(142);
    ap_CS_fsm_state147 <= ap_CS_fsm(146);
    ap_CS_fsm_state148 <= ap_CS_fsm(147);
    ap_CS_fsm_state149 <= ap_CS_fsm(148);
    ap_CS_fsm_state150 <= ap_CS_fsm(149);
    ap_CS_fsm_state151 <= ap_CS_fsm(150);
    ap_CS_fsm_state152 <= ap_CS_fsm(151);
    ap_CS_fsm_state153 <= ap_CS_fsm(152);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state69 <= ap_CS_fsm(68);
    ap_CS_fsm_state70 <= ap_CS_fsm(69);
    ap_CS_fsm_state74 <= ap_CS_fsm(73);
    ap_CS_fsm_state75 <= ap_CS_fsm(74);
    ap_CS_fsm_state76 <= ap_CS_fsm(75);
    ap_CS_fsm_state77 <= ap_CS_fsm(76);
    ap_CS_fsm_state78 <= ap_CS_fsm(77);
    ap_CS_fsm_state79 <= ap_CS_fsm(78);
    ap_CS_fsm_state80 <= ap_CS_fsm(79);
    ap_CS_fsm_state81 <= ap_CS_fsm(80);
    ap_CS_fsm_state82 <= ap_CS_fsm(81);
    ap_CS_fsm_state83 <= ap_CS_fsm(82);
    ap_CS_fsm_state84 <= ap_CS_fsm(83);
    ap_CS_fsm_state85 <= ap_CS_fsm(84);
    ap_CS_fsm_state86 <= ap_CS_fsm(85);
    ap_CS_fsm_state87 <= ap_CS_fsm(86);
    ap_CS_fsm_state88 <= ap_CS_fsm(87);
    ap_CS_fsm_state89 <= ap_CS_fsm(88);
    ap_CS_fsm_state90 <= ap_CS_fsm(89);
    ap_CS_fsm_state91 <= ap_CS_fsm(90);
    ap_CS_fsm_state92 <= ap_CS_fsm(91);
    ap_CS_fsm_state93 <= ap_CS_fsm(92);
    ap_CS_fsm_state94 <= ap_CS_fsm(93);
    ap_CS_fsm_state95 <= ap_CS_fsm(94);
    ap_CS_fsm_state96 <= ap_CS_fsm(95);
    ap_CS_fsm_state97 <= ap_CS_fsm(96);
    ap_CS_fsm_state98 <= ap_CS_fsm(97);
    ap_CS_fsm_state99 <= ap_CS_fsm(98);
    ap_ST_fsm_state100_blk <= ap_const_logic_0;
    ap_ST_fsm_state101_blk <= ap_const_logic_0;
    ap_ST_fsm_state102_blk <= ap_const_logic_0;
    ap_ST_fsm_state103_blk <= ap_const_logic_0;
    ap_ST_fsm_state104_blk <= ap_const_logic_0;
    ap_ST_fsm_state105_blk <= ap_const_logic_0;
    ap_ST_fsm_state106_blk <= ap_const_logic_0;
    ap_ST_fsm_state107_blk <= ap_const_logic_0;
    ap_ST_fsm_state108_blk <= ap_const_logic_0;
    ap_ST_fsm_state109_blk <= ap_const_logic_0;
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state110_blk <= ap_const_logic_0;
    ap_ST_fsm_state111_blk <= ap_const_logic_0;
    ap_ST_fsm_state112_blk <= ap_const_logic_0;
    ap_ST_fsm_state113_blk <= ap_const_logic_0;
    ap_ST_fsm_state114_blk <= ap_const_logic_0;
    ap_ST_fsm_state115_blk <= ap_const_logic_0;
    ap_ST_fsm_state116_blk <= ap_const_logic_0;
    ap_ST_fsm_state117_blk <= ap_const_logic_0;
    ap_ST_fsm_state118_blk <= ap_const_logic_0;
    ap_ST_fsm_state119_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state120_blk <= ap_const_logic_0;
    ap_ST_fsm_state121_blk <= ap_const_logic_0;
    ap_ST_fsm_state122_blk <= ap_const_logic_0;
    ap_ST_fsm_state123_blk <= ap_const_logic_0;
    ap_ST_fsm_state124_blk <= ap_const_logic_0;
    ap_ST_fsm_state125_blk <= ap_const_logic_0;
    ap_ST_fsm_state126_blk <= ap_const_logic_0;
    ap_ST_fsm_state127_blk <= ap_const_logic_0;
    ap_ST_fsm_state128_blk <= ap_const_logic_0;
    ap_ST_fsm_state129_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;
    ap_ST_fsm_state130_blk <= ap_const_logic_0;
    ap_ST_fsm_state131_blk <= ap_const_logic_0;
    ap_ST_fsm_state132_blk <= ap_const_logic_0;
    ap_ST_fsm_state133_blk <= ap_const_logic_0;
    ap_ST_fsm_state134_blk <= ap_const_logic_0;
    ap_ST_fsm_state135_blk <= ap_const_logic_0;
    ap_ST_fsm_state136_blk <= ap_const_logic_0;
    ap_ST_fsm_state137_blk <= ap_const_logic_0;
    ap_ST_fsm_state138_blk <= ap_const_logic_0;
    ap_ST_fsm_state139_blk <= ap_const_logic_0;
    ap_ST_fsm_state13_blk <= ap_const_logic_0;
    ap_ST_fsm_state140_blk <= ap_const_logic_0;
    ap_ST_fsm_state141_blk <= ap_const_logic_0;
    ap_ST_fsm_state142_blk <= ap_const_logic_0;
    ap_ST_fsm_state143_blk <= ap_const_logic_0;
    ap_ST_fsm_state144_blk <= ap_const_logic_0;
    ap_ST_fsm_state145_blk <= ap_const_logic_0;
    ap_ST_fsm_state146_blk <= ap_const_logic_0;
    ap_ST_fsm_state147_blk <= ap_const_logic_0;
    ap_ST_fsm_state148_blk <= ap_const_logic_0;
    ap_ST_fsm_state149_blk <= ap_const_logic_0;
    ap_ST_fsm_state14_blk <= ap_const_logic_0;
    ap_ST_fsm_state150_blk <= ap_const_logic_0;

    ap_ST_fsm_state151_blk_assign_proc : process(grp_sgemm_Pipeline_VITIS_LOOP_76_1_calc_loop_fu_239_ap_done)
    begin
        if ((grp_sgemm_Pipeline_VITIS_LOOP_76_1_calc_loop_fu_239_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state151_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state151_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state152_blk <= ap_const_logic_0;

    ap_ST_fsm_state153_blk_assign_proc : process(ap_block_state153_on_subcall_done)
    begin
        if ((ap_const_boolean_1 = ap_block_state153_on_subcall_done)) then 
            ap_ST_fsm_state153_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state153_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state15_blk <= ap_const_logic_0;
    ap_ST_fsm_state16_blk <= ap_const_logic_0;
    ap_ST_fsm_state17_blk <= ap_const_logic_0;
    ap_ST_fsm_state18_blk <= ap_const_logic_0;
    ap_ST_fsm_state19_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state20_blk <= ap_const_logic_0;
    ap_ST_fsm_state21_blk <= ap_const_logic_0;
    ap_ST_fsm_state22_blk <= ap_const_logic_0;
    ap_ST_fsm_state23_blk <= ap_const_logic_0;
    ap_ST_fsm_state24_blk <= ap_const_logic_0;
    ap_ST_fsm_state25_blk <= ap_const_logic_0;
    ap_ST_fsm_state26_blk <= ap_const_logic_0;
    ap_ST_fsm_state27_blk <= ap_const_logic_0;
    ap_ST_fsm_state28_blk <= ap_const_logic_0;
    ap_ST_fsm_state29_blk <= ap_const_logic_0;
    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state30_blk <= ap_const_logic_0;
    ap_ST_fsm_state31_blk <= ap_const_logic_0;
    ap_ST_fsm_state32_blk <= ap_const_logic_0;
    ap_ST_fsm_state33_blk <= ap_const_logic_0;
    ap_ST_fsm_state34_blk <= ap_const_logic_0;
    ap_ST_fsm_state35_blk <= ap_const_logic_0;
    ap_ST_fsm_state36_blk <= ap_const_logic_0;
    ap_ST_fsm_state37_blk <= ap_const_logic_0;
    ap_ST_fsm_state38_blk <= ap_const_logic_0;
    ap_ST_fsm_state39_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state40_blk <= ap_const_logic_0;
    ap_ST_fsm_state41_blk <= ap_const_logic_0;
    ap_ST_fsm_state42_blk <= ap_const_logic_0;
    ap_ST_fsm_state43_blk <= ap_const_logic_0;
    ap_ST_fsm_state44_blk <= ap_const_logic_0;
    ap_ST_fsm_state45_blk <= ap_const_logic_0;
    ap_ST_fsm_state46_blk <= ap_const_logic_0;
    ap_ST_fsm_state47_blk <= ap_const_logic_0;
    ap_ST_fsm_state48_blk <= ap_const_logic_0;
    ap_ST_fsm_state49_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state50_blk <= ap_const_logic_0;
    ap_ST_fsm_state51_blk <= ap_const_logic_0;
    ap_ST_fsm_state52_blk <= ap_const_logic_0;
    ap_ST_fsm_state53_blk <= ap_const_logic_0;
    ap_ST_fsm_state54_blk <= ap_const_logic_0;
    ap_ST_fsm_state55_blk <= ap_const_logic_0;
    ap_ST_fsm_state56_blk <= ap_const_logic_0;
    ap_ST_fsm_state57_blk <= ap_const_logic_0;
    ap_ST_fsm_state58_blk <= ap_const_logic_0;
    ap_ST_fsm_state59_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state60_blk <= ap_const_logic_0;
    ap_ST_fsm_state61_blk <= ap_const_logic_0;
    ap_ST_fsm_state62_blk <= ap_const_logic_0;
    ap_ST_fsm_state63_blk <= ap_const_logic_0;
    ap_ST_fsm_state64_blk <= ap_const_logic_0;
    ap_ST_fsm_state65_blk <= ap_const_logic_0;
    ap_ST_fsm_state66_blk <= ap_const_logic_0;
    ap_ST_fsm_state67_blk <= ap_const_logic_0;
    ap_ST_fsm_state68_blk <= ap_const_logic_0;
    ap_ST_fsm_state69_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state70_blk <= ap_const_logic_0;
    ap_ST_fsm_state71_blk <= ap_const_logic_0;
    ap_ST_fsm_state72_blk <= ap_const_logic_0;
    ap_ST_fsm_state73_blk <= ap_const_logic_0;
    ap_ST_fsm_state74_blk <= ap_const_logic_0;
    ap_ST_fsm_state75_blk <= ap_const_logic_0;

    ap_ST_fsm_state76_blk_assign_proc : process(grp_sgemm_Pipeline_1_fu_234_ap_done)
    begin
        if ((grp_sgemm_Pipeline_1_fu_234_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state76_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state76_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state77_blk <= ap_const_logic_0;
    ap_ST_fsm_state78_blk <= ap_const_logic_0;
    ap_ST_fsm_state79_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state80_blk <= ap_const_logic_0;
    ap_ST_fsm_state81_blk <= ap_const_logic_0;
    ap_ST_fsm_state82_blk <= ap_const_logic_0;
    ap_ST_fsm_state83_blk <= ap_const_logic_0;
    ap_ST_fsm_state84_blk <= ap_const_logic_0;
    ap_ST_fsm_state85_blk <= ap_const_logic_0;
    ap_ST_fsm_state86_blk <= ap_const_logic_0;
    ap_ST_fsm_state87_blk <= ap_const_logic_0;
    ap_ST_fsm_state88_blk <= ap_const_logic_0;
    ap_ST_fsm_state89_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state90_blk <= ap_const_logic_0;
    ap_ST_fsm_state91_blk <= ap_const_logic_0;
    ap_ST_fsm_state92_blk <= ap_const_logic_0;
    ap_ST_fsm_state93_blk <= ap_const_logic_0;
    ap_ST_fsm_state94_blk <= ap_const_logic_0;
    ap_ST_fsm_state95_blk <= ap_const_logic_0;
    ap_ST_fsm_state96_blk <= ap_const_logic_0;
    ap_ST_fsm_state97_blk <= ap_const_logic_0;
    ap_ST_fsm_state98_blk <= ap_const_logic_0;
    ap_ST_fsm_state99_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_block_state153_on_subcall_done_assign_proc : process(cmp257_i_reg_548, grp_sgemm_Pipeline_VITIS_LOOP_87_2_VITIS_LOOP_89_3_fu_258_ap_done)
    begin
                ap_block_state153_on_subcall_done <= ((grp_sgemm_Pipeline_VITIS_LOOP_87_2_VITIS_LOOP_89_3_fu_258_ap_done = ap_const_logic_0) and (cmp257_i_reg_548 = ap_const_lv1_0));
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state75, icmp_ln67_fu_367_p2)
    begin
        if (((icmp_ln67_fu_367_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state75))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state75, icmp_ln67_fu_367_p2)
    begin
        if (((icmp_ln67_fu_367_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state75))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    cmp257_i_fu_343_p2 <= "1" when (RN_read_reg_438 = ap_const_lv8_0) else "0";
    grp_fu_272_p0 <= sdiv_ln69_reg_572(63 - 1 downto 0);
    grp_fu_272_p1 <= zext_ln58_1_reg_533(8 - 1 downto 0);
    grp_fu_276_p0 <= srem_ln70_reg_577(63 - 1 downto 0);
    grp_fu_276_p1 <= zext_ln59_1_reg_538(8 - 1 downto 0);

    grp_fu_324_ap_start_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_324_ap_start <= ap_const_logic_1;
        else 
            grp_fu_324_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_324_p1 <= grp_fu_324_p10(9 - 1 downto 0);
    grp_fu_324_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(RM_read_reg_446),64));

    grp_fu_332_ap_start_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_332_ap_start <= ap_const_logic_1;
        else 
            grp_fu_332_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_332_p1 <= grp_fu_332_p10(9 - 1 downto 0);
    grp_fu_332_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(RN_read_reg_438),64));

    grp_fu_378_ap_start_assign_proc : process(ap_CS_fsm_state75, icmp_ln67_fu_367_p2)
    begin
        if (((icmp_ln67_fu_367_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state75))) then 
            grp_fu_378_ap_start <= ap_const_logic_1;
        else 
            grp_fu_378_ap_start <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_378_ce_assign_proc : process(ap_CS_fsm_state75, ap_CS_fsm_state142, ap_CS_fsm_state76, ap_CS_fsm_state77, ap_CS_fsm_state78, ap_CS_fsm_state79, ap_CS_fsm_state80, ap_CS_fsm_state81, ap_CS_fsm_state82, ap_CS_fsm_state83, ap_CS_fsm_state84, ap_CS_fsm_state85, ap_CS_fsm_state86, ap_CS_fsm_state87, ap_CS_fsm_state88, ap_CS_fsm_state89, ap_CS_fsm_state90, ap_CS_fsm_state91, ap_CS_fsm_state92, ap_CS_fsm_state93, ap_CS_fsm_state94, ap_CS_fsm_state95, ap_CS_fsm_state96, ap_CS_fsm_state97, ap_CS_fsm_state98, ap_CS_fsm_state99, ap_CS_fsm_state100, ap_CS_fsm_state101, ap_CS_fsm_state102, ap_CS_fsm_state103, ap_CS_fsm_state104, ap_CS_fsm_state105, ap_CS_fsm_state106, ap_CS_fsm_state107, ap_CS_fsm_state108, ap_CS_fsm_state109, ap_CS_fsm_state110, ap_CS_fsm_state111, ap_CS_fsm_state112, ap_CS_fsm_state113, ap_CS_fsm_state114, ap_CS_fsm_state115, ap_CS_fsm_state116, ap_CS_fsm_state117, ap_CS_fsm_state118, ap_CS_fsm_state119, ap_CS_fsm_state120, ap_CS_fsm_state121, ap_CS_fsm_state122, ap_CS_fsm_state123, ap_CS_fsm_state124, ap_CS_fsm_state125, ap_CS_fsm_state126, ap_CS_fsm_state127, ap_CS_fsm_state128, ap_CS_fsm_state129, ap_CS_fsm_state130, ap_CS_fsm_state131, ap_CS_fsm_state132, ap_CS_fsm_state133, ap_CS_fsm_state134, ap_CS_fsm_state135, ap_CS_fsm_state136, ap_CS_fsm_state137, ap_CS_fsm_state138, ap_CS_fsm_state139, ap_CS_fsm_state140, ap_CS_fsm_state141)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state76) or (ap_const_logic_1 = ap_CS_fsm_state142) or (ap_const_logic_1 = ap_CS_fsm_state75) or (ap_const_logic_1 = ap_CS_fsm_state141) or (ap_const_logic_1 = ap_CS_fsm_state140) or (ap_const_logic_1 = ap_CS_fsm_state139) or (ap_const_logic_1 = ap_CS_fsm_state138) or (ap_const_logic_1 = ap_CS_fsm_state137) or (ap_const_logic_1 = ap_CS_fsm_state136) or (ap_const_logic_1 = ap_CS_fsm_state135) or (ap_const_logic_1 = ap_CS_fsm_state134) or (ap_const_logic_1 = ap_CS_fsm_state133) or (ap_const_logic_1 = ap_CS_fsm_state132) or (ap_const_logic_1 = ap_CS_fsm_state131) or (ap_const_logic_1 = ap_CS_fsm_state130) or (ap_const_logic_1 = ap_CS_fsm_state129) or (ap_const_logic_1 = ap_CS_fsm_state128) or (ap_const_logic_1 = ap_CS_fsm_state127) or (ap_const_logic_1 = ap_CS_fsm_state126) or (ap_const_logic_1 = ap_CS_fsm_state125) or (ap_const_logic_1 = ap_CS_fsm_state124) or (ap_const_logic_1 = ap_CS_fsm_state123) or (ap_const_logic_1 = ap_CS_fsm_state122) or (ap_const_logic_1 = ap_CS_fsm_state121) 
    or (ap_const_logic_1 = ap_CS_fsm_state120) or (ap_const_logic_1 = ap_CS_fsm_state119) or (ap_const_logic_1 = ap_CS_fsm_state118) or (ap_const_logic_1 = ap_CS_fsm_state117) or (ap_const_logic_1 = ap_CS_fsm_state116) or (ap_const_logic_1 = ap_CS_fsm_state115) or (ap_const_logic_1 = ap_CS_fsm_state114) or (ap_const_logic_1 = ap_CS_fsm_state113) or (ap_const_logic_1 = ap_CS_fsm_state112) or (ap_const_logic_1 = ap_CS_fsm_state111) or (ap_const_logic_1 = ap_CS_fsm_state110) or (ap_const_logic_1 = ap_CS_fsm_state109) or (ap_const_logic_1 = ap_CS_fsm_state108) or (ap_const_logic_1 = ap_CS_fsm_state107) or (ap_const_logic_1 = ap_CS_fsm_state106) or (ap_const_logic_1 = ap_CS_fsm_state105) or (ap_const_logic_1 = ap_CS_fsm_state104) or (ap_const_logic_1 = ap_CS_fsm_state103) or (ap_const_logic_1 = ap_CS_fsm_state102) or (ap_const_logic_1 = ap_CS_fsm_state101) or (ap_const_logic_1 = ap_CS_fsm_state100) or (ap_const_logic_1 = ap_CS_fsm_state99) or (ap_const_logic_1 = ap_CS_fsm_state98) or (ap_const_logic_1 = ap_CS_fsm_state97) 
    or (ap_const_logic_1 = ap_CS_fsm_state96) or (ap_const_logic_1 = ap_CS_fsm_state95) or (ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state93) or (ap_const_logic_1 = ap_CS_fsm_state92) or (ap_const_logic_1 = ap_CS_fsm_state91) or (ap_const_logic_1 = ap_CS_fsm_state90) or (ap_const_logic_1 = ap_CS_fsm_state89) or (ap_const_logic_1 = ap_CS_fsm_state88) or (ap_const_logic_1 = ap_CS_fsm_state87) or (ap_const_logic_1 = ap_CS_fsm_state86) or (ap_const_logic_1 = ap_CS_fsm_state85) or (ap_const_logic_1 = ap_CS_fsm_state84) or (ap_const_logic_1 = ap_CS_fsm_state83) or (ap_const_logic_1 = ap_CS_fsm_state82) or (ap_const_logic_1 = ap_CS_fsm_state81) or (ap_const_logic_1 = ap_CS_fsm_state80) or (ap_const_logic_1 = ap_CS_fsm_state79) or (ap_const_logic_1 = ap_CS_fsm_state78) or (ap_const_logic_1 = ap_CS_fsm_state77))) then 
            grp_fu_378_ce <= ap_const_logic_1;
        else 
            grp_fu_378_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_383_ap_start_assign_proc : process(ap_CS_fsm_state75, icmp_ln67_fu_367_p2)
    begin
        if (((icmp_ln67_fu_367_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state75))) then 
            grp_fu_383_ap_start <= ap_const_logic_1;
        else 
            grp_fu_383_ap_start <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_383_ce_assign_proc : process(ap_CS_fsm_state75, ap_CS_fsm_state142, ap_CS_fsm_state76, ap_CS_fsm_state77, ap_CS_fsm_state78, ap_CS_fsm_state79, ap_CS_fsm_state80, ap_CS_fsm_state81, ap_CS_fsm_state82, ap_CS_fsm_state83, ap_CS_fsm_state84, ap_CS_fsm_state85, ap_CS_fsm_state86, ap_CS_fsm_state87, ap_CS_fsm_state88, ap_CS_fsm_state89, ap_CS_fsm_state90, ap_CS_fsm_state91, ap_CS_fsm_state92, ap_CS_fsm_state93, ap_CS_fsm_state94, ap_CS_fsm_state95, ap_CS_fsm_state96, ap_CS_fsm_state97, ap_CS_fsm_state98, ap_CS_fsm_state99, ap_CS_fsm_state100, ap_CS_fsm_state101, ap_CS_fsm_state102, ap_CS_fsm_state103, ap_CS_fsm_state104, ap_CS_fsm_state105, ap_CS_fsm_state106, ap_CS_fsm_state107, ap_CS_fsm_state108, ap_CS_fsm_state109, ap_CS_fsm_state110, ap_CS_fsm_state111, ap_CS_fsm_state112, ap_CS_fsm_state113, ap_CS_fsm_state114, ap_CS_fsm_state115, ap_CS_fsm_state116, ap_CS_fsm_state117, ap_CS_fsm_state118, ap_CS_fsm_state119, ap_CS_fsm_state120, ap_CS_fsm_state121, ap_CS_fsm_state122, ap_CS_fsm_state123, ap_CS_fsm_state124, ap_CS_fsm_state125, ap_CS_fsm_state126, ap_CS_fsm_state127, ap_CS_fsm_state128, ap_CS_fsm_state129, ap_CS_fsm_state130, ap_CS_fsm_state131, ap_CS_fsm_state132, ap_CS_fsm_state133, ap_CS_fsm_state134, ap_CS_fsm_state135, ap_CS_fsm_state136, ap_CS_fsm_state137, ap_CS_fsm_state138, ap_CS_fsm_state139, ap_CS_fsm_state140, ap_CS_fsm_state141)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state76) or (ap_const_logic_1 = ap_CS_fsm_state142) or (ap_const_logic_1 = ap_CS_fsm_state75) or (ap_const_logic_1 = ap_CS_fsm_state141) or (ap_const_logic_1 = ap_CS_fsm_state140) or (ap_const_logic_1 = ap_CS_fsm_state139) or (ap_const_logic_1 = ap_CS_fsm_state138) or (ap_const_logic_1 = ap_CS_fsm_state137) or (ap_const_logic_1 = ap_CS_fsm_state136) or (ap_const_logic_1 = ap_CS_fsm_state135) or (ap_const_logic_1 = ap_CS_fsm_state134) or (ap_const_logic_1 = ap_CS_fsm_state133) or (ap_const_logic_1 = ap_CS_fsm_state132) or (ap_const_logic_1 = ap_CS_fsm_state131) or (ap_const_logic_1 = ap_CS_fsm_state130) or (ap_const_logic_1 = ap_CS_fsm_state129) or (ap_const_logic_1 = ap_CS_fsm_state128) or (ap_const_logic_1 = ap_CS_fsm_state127) or (ap_const_logic_1 = ap_CS_fsm_state126) or (ap_const_logic_1 = ap_CS_fsm_state125) or (ap_const_logic_1 = ap_CS_fsm_state124) or (ap_const_logic_1 = ap_CS_fsm_state123) or (ap_const_logic_1 = ap_CS_fsm_state122) or (ap_const_logic_1 = ap_CS_fsm_state121) 
    or (ap_const_logic_1 = ap_CS_fsm_state120) or (ap_const_logic_1 = ap_CS_fsm_state119) or (ap_const_logic_1 = ap_CS_fsm_state118) or (ap_const_logic_1 = ap_CS_fsm_state117) or (ap_const_logic_1 = ap_CS_fsm_state116) or (ap_const_logic_1 = ap_CS_fsm_state115) or (ap_const_logic_1 = ap_CS_fsm_state114) or (ap_const_logic_1 = ap_CS_fsm_state113) or (ap_const_logic_1 = ap_CS_fsm_state112) or (ap_const_logic_1 = ap_CS_fsm_state111) or (ap_const_logic_1 = ap_CS_fsm_state110) or (ap_const_logic_1 = ap_CS_fsm_state109) or (ap_const_logic_1 = ap_CS_fsm_state108) or (ap_const_logic_1 = ap_CS_fsm_state107) or (ap_const_logic_1 = ap_CS_fsm_state106) or (ap_const_logic_1 = ap_CS_fsm_state105) or (ap_const_logic_1 = ap_CS_fsm_state104) or (ap_const_logic_1 = ap_CS_fsm_state103) or (ap_const_logic_1 = ap_CS_fsm_state102) or (ap_const_logic_1 = ap_CS_fsm_state101) or (ap_const_logic_1 = ap_CS_fsm_state100) or (ap_const_logic_1 = ap_CS_fsm_state99) or (ap_const_logic_1 = ap_CS_fsm_state98) or (ap_const_logic_1 = ap_CS_fsm_state97) 
    or (ap_const_logic_1 = ap_CS_fsm_state96) or (ap_const_logic_1 = ap_CS_fsm_state95) or (ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state93) or (ap_const_logic_1 = ap_CS_fsm_state92) or (ap_const_logic_1 = ap_CS_fsm_state91) or (ap_const_logic_1 = ap_CS_fsm_state90) or (ap_const_logic_1 = ap_CS_fsm_state89) or (ap_const_logic_1 = ap_CS_fsm_state88) or (ap_const_logic_1 = ap_CS_fsm_state87) or (ap_const_logic_1 = ap_CS_fsm_state86) or (ap_const_logic_1 = ap_CS_fsm_state85) or (ap_const_logic_1 = ap_CS_fsm_state84) or (ap_const_logic_1 = ap_CS_fsm_state83) or (ap_const_logic_1 = ap_CS_fsm_state82) or (ap_const_logic_1 = ap_CS_fsm_state81) or (ap_const_logic_1 = ap_CS_fsm_state80) or (ap_const_logic_1 = ap_CS_fsm_state79) or (ap_const_logic_1 = ap_CS_fsm_state78) or (ap_const_logic_1 = ap_CS_fsm_state77))) then 
            grp_fu_383_ce <= ap_const_logic_1;
        else 
            grp_fu_383_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_sgemm_Pipeline_1_fu_234_ap_start <= grp_sgemm_Pipeline_1_fu_234_ap_start_reg;
    grp_sgemm_Pipeline_VITIS_LOOP_76_1_calc_loop_fu_239_ap_start <= grp_sgemm_Pipeline_VITIS_LOOP_76_1_calc_loop_fu_239_ap_start_reg;
    grp_sgemm_Pipeline_VITIS_LOOP_87_2_VITIS_LOOP_89_3_fu_258_ap_start <= grp_sgemm_Pipeline_VITIS_LOOP_87_2_VITIS_LOOP_89_3_fu_258_ap_start_reg;
    icmp_ln67_fu_367_p2 <= "1" when (signed(zext_ln67_fu_363_p1) < signed(tiles_reg_543)) else "0";
    icmp_ln72_fu_416_p2 <= "1" when (signed(zext_ln72_fu_412_p1) < signed(k_read_reg_471)) else "0";
    job_2_fu_372_p2 <= std_logic_vector(unsigned(job_fu_136) + unsigned(ap_const_lv63_1));
    l_1_fu_421_p2 <= std_logic_vector(unsigned(l_reg_222) + unsigned(ap_const_lv31_1));
    mul_ln97_fu_354_p0 <= mul_ln97_fu_354_p00(8 - 1 downto 0);
    mul_ln97_fu_354_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(RN_read_reg_438),16));
    mul_ln97_fu_354_p1 <= mul_ln97_fu_354_p10(8 - 1 downto 0);
    mul_ln97_fu_354_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(RM_read_reg_446),16));
    sub_ln58_fu_304_p2 <= std_logic_vector(unsigned(m) - unsigned(m0));
    sub_ln59_fu_310_p2 <= std_logic_vector(unsigned(n) - unsigned(n0));
    trunc_ln70_1_fu_400_p1 <= add_ln69_fu_396_p2(62 - 1 downto 0);
    trunc_ln72_fu_408_p1 <= add_ln70_fu_404_p2(62 - 1 downto 0);
    trunc_ln97_1_fu_288_p1 <= ldc(62 - 1 downto 0);
    trunc_ln97_2_fu_292_p1 <= ldb(63 - 1 downto 0);
    trunc_ln97_3_fu_296_p1 <= n0(63 - 1 downto 0);
    trunc_ln97_4_fu_300_p1 <= m0(63 - 1 downto 0);
    trunc_ln97_fu_284_p1 <= lda(63 - 1 downto 0);
    zext_ln58_1_fu_337_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(RM_read_reg_446),63));
    zext_ln59_1_fu_340_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(RN_read_reg_438),63));
    zext_ln67_fu_363_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(job_fu_136),64));
    zext_ln72_fu_412_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(l_reg_222),32));
end behav;
