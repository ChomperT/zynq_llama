-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity sgemm_sgemm_Pipeline_VITIS_LOOP_87_2_VITIS_LOOP_89_3 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_C_AWVALID : OUT STD_LOGIC;
    m_axi_C_AWREADY : IN STD_LOGIC;
    m_axi_C_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_C_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_C_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_C_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_C_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_C_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_C_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_C_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_C_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_C_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_C_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_C_WVALID : OUT STD_LOGIC;
    m_axi_C_WREADY : IN STD_LOGIC;
    m_axi_C_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_C_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_C_WLAST : OUT STD_LOGIC;
    m_axi_C_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_C_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_C_ARVALID : OUT STD_LOGIC;
    m_axi_C_ARREADY : IN STD_LOGIC;
    m_axi_C_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_C_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_C_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_C_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_C_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_C_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_C_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_C_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_C_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_C_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_C_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_C_RVALID : IN STD_LOGIC;
    m_axi_C_RREADY : OUT STD_LOGIC;
    m_axi_C_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_C_RLAST : IN STD_LOGIC;
    m_axi_C_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_C_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
    m_axi_C_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_C_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_C_BVALID : IN STD_LOGIC;
    m_axi_C_BREADY : OUT STD_LOGIC;
    m_axi_C_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_C_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_C_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    mul_ln97 : IN STD_LOGIC_VECTOR (15 downto 0);
    Cv_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    Cv_ce0 : OUT STD_LOGIC;
    Cv_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    RM : IN STD_LOGIC_VECTOR (7 downto 0);
    zext_ln89 : IN STD_LOGIC_VECTOR (7 downto 0);
    empty_25 : IN STD_LOGIC_VECTOR (61 downto 0);
    empty_26 : IN STD_LOGIC_VECTOR (61 downto 0);
    empty : IN STD_LOGIC_VECTOR (61 downto 0);
    C_offset : IN STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of sgemm_sgemm_Pipeline_VITIS_LOOP_87_2_VITIS_LOOP_89_3 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal or_ln87_reg_438 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln87_reg_438_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state8_io : BOOLEAN;
    signal icmp_ln89_1_reg_452 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln89_1_reg_452_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state14_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln87_fu_221_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal C_blk_n_B : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal C_blk_n_W : STD_LOGIC;
    signal C_blk_n_AW : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal zext_ln89_cast_fu_199_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln89_cast_reg_429 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln87_reg_434 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln87_fu_251_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln87_reg_438_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln87_reg_438_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln87_reg_438_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln87_reg_438_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln87_reg_438_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln87_fu_281_p2 : STD_LOGIC_VECTOR (61 downto 0);
    signal add_ln87_reg_442 : STD_LOGIC_VECTOR (61 downto 0);
    signal add_ln91_fu_309_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln91_reg_447 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln91_reg_447_pp0_iter1_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln91_reg_447_pp0_iter2_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln91_reg_447_pp0_iter3_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln91_reg_447_pp0_iter4_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln89_1_fu_321_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln89_1_reg_452_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln89_1_reg_452_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln89_1_reg_452_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln89_1_reg_452_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln89_1_reg_452_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln89_1_reg_452_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln89_1_reg_452_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln89_1_reg_452_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln89_1_reg_452_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln89_1_reg_452_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln89_1_reg_452_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_195_p2 : STD_LOGIC_VECTOR (61 downto 0);
    signal mul_ln87_reg_456 : STD_LOGIC_VECTOR (61 downto 0);
    signal sext_ln89_mid2_v_reg_466 : STD_LOGIC_VECTOR (61 downto 0);
    signal grp_fu_191_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv59_i_reg_476 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_first_iter_1_phi_fu_183_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal zext_ln91_fu_342_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln87_fu_373_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal i_fu_94 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal i_1_fu_315_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_allocacmp_i_load : STD_LOGIC_VECTOR (7 downto 0);
    signal j_fu_98 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal select_ln87_1_fu_265_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_allocacmp_j_load : STD_LOGIC_VECTOR (7 downto 0);
    signal indvar_flatten15_fu_102 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal add_ln87_3_fu_227_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_sig_allocacmp_indvar_flatten15_load : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln89_fu_245_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_2_fu_239_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln87_fu_277_p1 : STD_LOGIC_VECTOR (61 downto 0);
    signal trunc_ln87_fu_273_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_3_fu_291_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln91_fu_287_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln87_fu_257_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln91_fu_299_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln91_1_fu_305_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln87_1_fu_346_p2 : STD_LOGIC_VECTOR (61 downto 0);
    signal sext_ln89_mid2_v_v_v_v_fu_350_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln87_2_fu_358_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_191_ce : STD_LOGIC;
    signal grp_fu_195_ce : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter9_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter10_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter11_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter12_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_condition_500 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component sgemm_hptosp_16ns_32_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component sgemm_mul_62s_62s_62_5_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (61 downto 0);
        din1 : IN STD_LOGIC_VECTOR (61 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (61 downto 0) );
    end component;


    component sgemm_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    hptosp_16ns_32_2_no_dsp_1_U39 : component sgemm_hptosp_16ns_32_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => Cv_q0,
        ce => grp_fu_191_ce,
        dout => grp_fu_191_p1);

    mul_62s_62s_62_5_1_U40 : component sgemm_mul_62s_62s_62_5_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 62,
        din1_WIDTH => 62,
        dout_WIDTH => 62)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => add_ln87_reg_442,
        din1 => empty_26,
        ce => grp_fu_195_ce,
        dout => grp_fu_195_p2);

    flow_control_loop_pipe_sequential_init_U : component sgemm_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter12_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    i_fu_94_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln87_fu_221_p2 = ap_const_lv1_0))) then 
                    i_fu_94 <= i_1_fu_315_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_94 <= ap_const_lv8_0;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten15_fu_102_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln87_fu_221_p2 = ap_const_lv1_0))) then 
                    indvar_flatten15_fu_102 <= add_ln87_3_fu_227_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten15_fu_102 <= ap_const_lv16_0;
                end if;
            end if; 
        end if;
    end process;

    j_fu_98_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln87_fu_221_p2 = ap_const_lv1_0))) then 
                    j_fu_98 <= select_ln87_1_fu_265_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    j_fu_98 <= ap_const_lv8_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln87_reg_442 <= add_ln87_fu_281_p2;
                add_ln91_reg_447 <= add_ln91_fu_309_p2;
                add_ln91_reg_447_pp0_iter1_reg <= add_ln91_reg_447;
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                icmp_ln87_reg_434 <= icmp_ln87_fu_221_p2;
                icmp_ln89_1_reg_452 <= icmp_ln89_1_fu_321_p2;
                icmp_ln89_1_reg_452_pp0_iter1_reg <= icmp_ln89_1_reg_452;
                or_ln87_reg_438 <= or_ln87_fu_251_p2;
                or_ln87_reg_438_pp0_iter1_reg <= or_ln87_reg_438;
                    zext_ln89_cast_reg_429(7 downto 0) <= zext_ln89_cast_fu_199_p1(7 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                add_ln91_reg_447_pp0_iter2_reg <= add_ln91_reg_447_pp0_iter1_reg;
                add_ln91_reg_447_pp0_iter3_reg <= add_ln91_reg_447_pp0_iter2_reg;
                add_ln91_reg_447_pp0_iter4_reg <= add_ln91_reg_447_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
                ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
                ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
                ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
                conv59_i_reg_476 <= grp_fu_191_p1;
                icmp_ln89_1_reg_452_pp0_iter10_reg <= icmp_ln89_1_reg_452_pp0_iter9_reg;
                icmp_ln89_1_reg_452_pp0_iter11_reg <= icmp_ln89_1_reg_452_pp0_iter10_reg;
                icmp_ln89_1_reg_452_pp0_iter12_reg <= icmp_ln89_1_reg_452_pp0_iter11_reg;
                icmp_ln89_1_reg_452_pp0_iter2_reg <= icmp_ln89_1_reg_452_pp0_iter1_reg;
                icmp_ln89_1_reg_452_pp0_iter3_reg <= icmp_ln89_1_reg_452_pp0_iter2_reg;
                icmp_ln89_1_reg_452_pp0_iter4_reg <= icmp_ln89_1_reg_452_pp0_iter3_reg;
                icmp_ln89_1_reg_452_pp0_iter5_reg <= icmp_ln89_1_reg_452_pp0_iter4_reg;
                icmp_ln89_1_reg_452_pp0_iter6_reg <= icmp_ln89_1_reg_452_pp0_iter5_reg;
                icmp_ln89_1_reg_452_pp0_iter7_reg <= icmp_ln89_1_reg_452_pp0_iter6_reg;
                icmp_ln89_1_reg_452_pp0_iter8_reg <= icmp_ln89_1_reg_452_pp0_iter7_reg;
                icmp_ln89_1_reg_452_pp0_iter9_reg <= icmp_ln89_1_reg_452_pp0_iter8_reg;
                mul_ln87_reg_456 <= grp_fu_195_p2;
                or_ln87_reg_438_pp0_iter2_reg <= or_ln87_reg_438_pp0_iter1_reg;
                or_ln87_reg_438_pp0_iter3_reg <= or_ln87_reg_438_pp0_iter2_reg;
                or_ln87_reg_438_pp0_iter4_reg <= or_ln87_reg_438_pp0_iter3_reg;
                or_ln87_reg_438_pp0_iter5_reg <= or_ln87_reg_438_pp0_iter4_reg;
                or_ln87_reg_438_pp0_iter6_reg <= or_ln87_reg_438_pp0_iter5_reg;
                sext_ln89_mid2_v_reg_466 <= add_ln87_2_fu_358_p2(63 downto 2);
            end if;
        end if;
    end process;
    zext_ln89_cast_reg_429(31 downto 8) <= "000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;

    C_blk_n_AW_assign_proc : process(ap_enable_reg_pp0_iter7, m_axi_C_AWREADY, or_ln87_reg_438_pp0_iter6_reg, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (or_ln87_reg_438_pp0_iter6_reg = ap_const_lv1_1))) then 
            C_blk_n_AW <= m_axi_C_AWREADY;
        else 
            C_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    C_blk_n_B_assign_proc : process(ap_enable_reg_pp0_iter13, m_axi_C_BVALID, icmp_ln89_1_reg_452_pp0_iter12_reg, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln89_1_reg_452_pp0_iter12_reg = ap_const_lv1_1))) then 
            C_blk_n_B <= m_axi_C_BVALID;
        else 
            C_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    C_blk_n_W_assign_proc : process(ap_enable_reg_pp0_iter8, m_axi_C_WREADY, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            C_blk_n_W <= m_axi_C_WREADY;
        else 
            C_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    Cv_address0 <= zext_ln91_fu_342_p1(4 - 1 downto 0);

    Cv_ce0_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            Cv_ce0 <= ap_const_logic_1;
        else 
            Cv_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln87_1_fu_346_p2 <= std_logic_vector(unsigned(mul_ln87_reg_456) + unsigned(empty));
    add_ln87_2_fu_358_p2 <= std_logic_vector(unsigned(sext_ln89_mid2_v_v_v_v_fu_350_p3) + unsigned(C_offset));
    add_ln87_3_fu_227_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten15_load) + unsigned(ap_const_lv16_1));
    add_ln87_fu_281_p2 <= std_logic_vector(unsigned(zext_ln87_fu_277_p1) + unsigned(empty_25));
    add_ln91_fu_309_p2 <= std_logic_vector(unsigned(sub_ln91_fu_299_p2) + unsigned(trunc_ln91_1_fu_305_p1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter13, ap_block_state14_pp0_stage0_iter13)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state14_pp0_stage0_iter13));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter13, m_axi_C_WREADY, ap_block_state8_io, ap_block_state14_pp0_stage0_iter13)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state14_pp0_stage0_iter13)) or ((m_axi_C_WREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state8_io)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter13, m_axi_C_WREADY, ap_block_state8_io, ap_block_state14_pp0_stage0_iter13)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state14_pp0_stage0_iter13)) or ((m_axi_C_WREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state8_io)));
    end process;


    ap_block_state14_pp0_stage0_iter13_assign_proc : process(m_axi_C_BVALID, icmp_ln89_1_reg_452_pp0_iter12_reg)
    begin
                ap_block_state14_pp0_stage0_iter13 <= ((icmp_ln89_1_reg_452_pp0_iter12_reg = ap_const_lv1_1) and (m_axi_C_BVALID = ap_const_logic_0));
    end process;


    ap_block_state8_io_assign_proc : process(m_axi_C_AWREADY, or_ln87_reg_438_pp0_iter6_reg)
    begin
                ap_block_state8_io <= ((m_axi_C_AWREADY = ap_const_logic_0) and (or_ln87_reg_438_pp0_iter6_reg = ap_const_lv1_1));
    end process;


    ap_condition_500_assign_proc : process(ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln87_reg_434)
    begin
                ap_condition_500 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln87_reg_434 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0));
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln87_fu_221_p2)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln87_fu_221_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter12_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter12_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13)
    begin
        if (((ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_phi_mux_first_iter_1_phi_fu_183_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_loop_init, ap_condition_500)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then
            if ((ap_loop_init = ap_const_logic_1)) then 
                ap_phi_mux_first_iter_1_phi_fu_183_p4 <= ap_const_lv1_1;
            elsif ((ap_const_boolean_1 = ap_condition_500)) then 
                ap_phi_mux_first_iter_1_phi_fu_183_p4 <= ap_const_lv1_0;
            else 
                ap_phi_mux_first_iter_1_phi_fu_183_p4 <= ap_const_lv1_1;
            end if;
        else 
            ap_phi_mux_first_iter_1_phi_fu_183_p4 <= ap_const_lv1_1;
        end if; 
    end process;


    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, i_fu_94)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_i_load <= ap_const_lv8_0;
        else 
            ap_sig_allocacmp_i_load <= i_fu_94;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten15_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten15_fu_102)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_indvar_flatten15_load <= ap_const_lv16_0;
        else 
            ap_sig_allocacmp_indvar_flatten15_load <= indvar_flatten15_fu_102;
        end if; 
    end process;


    ap_sig_allocacmp_j_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, j_fu_98)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_j_load <= ap_const_lv8_0;
        else 
            ap_sig_allocacmp_j_load <= j_fu_98;
        end if; 
    end process;


    grp_fu_191_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_191_ce <= ap_const_logic_1;
        else 
            grp_fu_191_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_195_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_195_ce <= ap_const_logic_1;
        else 
            grp_fu_195_ce <= ap_const_logic_0;
        end if; 
    end process;

    i_1_fu_315_p2 <= std_logic_vector(unsigned(select_ln87_fu_257_p3) + unsigned(ap_const_lv8_1));
    icmp_ln87_fu_221_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten15_load = mul_ln97) else "0";
    icmp_ln89_1_fu_321_p2 <= "1" when (i_1_fu_315_p2 = RM) else "0";
    icmp_ln89_fu_245_p2 <= "1" when (ap_sig_allocacmp_i_load = RM) else "0";
    j_2_fu_239_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_j_load) + unsigned(ap_const_lv8_1));
    m_axi_C_ARADDR <= ap_const_lv64_0;
    m_axi_C_ARBURST <= ap_const_lv2_0;
    m_axi_C_ARCACHE <= ap_const_lv4_0;
    m_axi_C_ARID <= ap_const_lv1_0;
    m_axi_C_ARLEN <= ap_const_lv32_0;
    m_axi_C_ARLOCK <= ap_const_lv2_0;
    m_axi_C_ARPROT <= ap_const_lv3_0;
    m_axi_C_ARQOS <= ap_const_lv4_0;
    m_axi_C_ARREGION <= ap_const_lv4_0;
    m_axi_C_ARSIZE <= ap_const_lv3_0;
    m_axi_C_ARUSER <= ap_const_lv1_0;
    m_axi_C_ARVALID <= ap_const_logic_0;
    m_axi_C_AWADDR <= sext_ln87_fu_373_p1;
    m_axi_C_AWBURST <= ap_const_lv2_0;
    m_axi_C_AWCACHE <= ap_const_lv4_0;
    m_axi_C_AWID <= ap_const_lv1_0;
    m_axi_C_AWLEN <= zext_ln89_cast_reg_429;
    m_axi_C_AWLOCK <= ap_const_lv2_0;
    m_axi_C_AWPROT <= ap_const_lv3_0;
    m_axi_C_AWQOS <= ap_const_lv4_0;
    m_axi_C_AWREGION <= ap_const_lv4_0;
    m_axi_C_AWSIZE <= ap_const_lv3_0;
    m_axi_C_AWUSER <= ap_const_lv1_0;

    m_axi_C_AWVALID_assign_proc : process(ap_enable_reg_pp0_iter7, or_ln87_reg_438_pp0_iter6_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (or_ln87_reg_438_pp0_iter6_reg = ap_const_lv1_1))) then 
            m_axi_C_AWVALID <= ap_const_logic_1;
        else 
            m_axi_C_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_C_BREADY_assign_proc : process(ap_enable_reg_pp0_iter13, icmp_ln89_1_reg_452_pp0_iter12_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln89_1_reg_452_pp0_iter12_reg = ap_const_lv1_1))) then 
            m_axi_C_BREADY <= ap_const_logic_1;
        else 
            m_axi_C_BREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_C_RREADY <= ap_const_logic_0;
    m_axi_C_WDATA <= conv59_i_reg_476;
    m_axi_C_WID <= ap_const_lv1_0;
    m_axi_C_WLAST <= ap_const_logic_0;
    m_axi_C_WSTRB <= ap_const_lv4_F;
    m_axi_C_WUSER <= ap_const_lv1_0;

    m_axi_C_WVALID_assign_proc : process(ap_enable_reg_pp0_iter8, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            m_axi_C_WVALID <= ap_const_logic_1;
        else 
            m_axi_C_WVALID <= ap_const_logic_0;
        end if; 
    end process;

    or_ln87_fu_251_p2 <= (icmp_ln89_fu_245_p2 or ap_phi_mux_first_iter_1_phi_fu_183_p4);
    select_ln87_1_fu_265_p3 <= 
        j_2_fu_239_p2 when (icmp_ln89_fu_245_p2(0) = '1') else 
        ap_sig_allocacmp_j_load;
    select_ln87_fu_257_p3 <= 
        ap_const_lv8_0 when (icmp_ln89_fu_245_p2(0) = '1') else 
        ap_sig_allocacmp_i_load;
        sext_ln87_fu_373_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln89_mid2_v_reg_466),64));

    sext_ln89_mid2_v_v_v_v_fu_350_p3 <= (add_ln87_1_fu_346_p2 & ap_const_lv2_0);
    sub_ln91_fu_299_p2 <= std_logic_vector(unsigned(tmp_3_fu_291_p3) - unsigned(trunc_ln91_fu_287_p1));
    tmp_3_fu_291_p3 <= (trunc_ln87_fu_273_p1 & ap_const_lv2_0);
    trunc_ln87_fu_273_p1 <= select_ln87_1_fu_265_p3(2 - 1 downto 0);
    trunc_ln91_1_fu_305_p1 <= select_ln87_fu_257_p3(4 - 1 downto 0);
    trunc_ln91_fu_287_p1 <= select_ln87_1_fu_265_p3(4 - 1 downto 0);
    zext_ln87_fu_277_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln87_1_fu_265_p3),62));
    zext_ln89_cast_fu_199_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln89),32));
    zext_ln91_fu_342_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln91_reg_447_pp0_iter4_reg),64));
end behav;
