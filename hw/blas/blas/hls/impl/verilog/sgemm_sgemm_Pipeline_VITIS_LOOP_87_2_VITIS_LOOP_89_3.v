// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module sgemm_sgemm_Pipeline_VITIS_LOOP_87_2_VITIS_LOOP_89_3 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_C_AWVALID,
        m_axi_C_AWREADY,
        m_axi_C_AWADDR,
        m_axi_C_AWID,
        m_axi_C_AWLEN,
        m_axi_C_AWSIZE,
        m_axi_C_AWBURST,
        m_axi_C_AWLOCK,
        m_axi_C_AWCACHE,
        m_axi_C_AWPROT,
        m_axi_C_AWQOS,
        m_axi_C_AWREGION,
        m_axi_C_AWUSER,
        m_axi_C_WVALID,
        m_axi_C_WREADY,
        m_axi_C_WDATA,
        m_axi_C_WSTRB,
        m_axi_C_WLAST,
        m_axi_C_WID,
        m_axi_C_WUSER,
        m_axi_C_ARVALID,
        m_axi_C_ARREADY,
        m_axi_C_ARADDR,
        m_axi_C_ARID,
        m_axi_C_ARLEN,
        m_axi_C_ARSIZE,
        m_axi_C_ARBURST,
        m_axi_C_ARLOCK,
        m_axi_C_ARCACHE,
        m_axi_C_ARPROT,
        m_axi_C_ARQOS,
        m_axi_C_ARREGION,
        m_axi_C_ARUSER,
        m_axi_C_RVALID,
        m_axi_C_RREADY,
        m_axi_C_RDATA,
        m_axi_C_RLAST,
        m_axi_C_RID,
        m_axi_C_RFIFONUM,
        m_axi_C_RUSER,
        m_axi_C_RRESP,
        m_axi_C_BVALID,
        m_axi_C_BREADY,
        m_axi_C_BRESP,
        m_axi_C_BID,
        m_axi_C_BUSER,
        mul_ln97,
        Cv_address0,
        Cv_ce0,
        Cv_q0,
        RM,
        zext_ln89,
        empty_25,
        empty_26,
        empty,
        C_offset
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_C_AWVALID;
input   m_axi_C_AWREADY;
output  [63:0] m_axi_C_AWADDR;
output  [0:0] m_axi_C_AWID;
output  [31:0] m_axi_C_AWLEN;
output  [2:0] m_axi_C_AWSIZE;
output  [1:0] m_axi_C_AWBURST;
output  [1:0] m_axi_C_AWLOCK;
output  [3:0] m_axi_C_AWCACHE;
output  [2:0] m_axi_C_AWPROT;
output  [3:0] m_axi_C_AWQOS;
output  [3:0] m_axi_C_AWREGION;
output  [0:0] m_axi_C_AWUSER;
output   m_axi_C_WVALID;
input   m_axi_C_WREADY;
output  [31:0] m_axi_C_WDATA;
output  [3:0] m_axi_C_WSTRB;
output   m_axi_C_WLAST;
output  [0:0] m_axi_C_WID;
output  [0:0] m_axi_C_WUSER;
output   m_axi_C_ARVALID;
input   m_axi_C_ARREADY;
output  [63:0] m_axi_C_ARADDR;
output  [0:0] m_axi_C_ARID;
output  [31:0] m_axi_C_ARLEN;
output  [2:0] m_axi_C_ARSIZE;
output  [1:0] m_axi_C_ARBURST;
output  [1:0] m_axi_C_ARLOCK;
output  [3:0] m_axi_C_ARCACHE;
output  [2:0] m_axi_C_ARPROT;
output  [3:0] m_axi_C_ARQOS;
output  [3:0] m_axi_C_ARREGION;
output  [0:0] m_axi_C_ARUSER;
input   m_axi_C_RVALID;
output   m_axi_C_RREADY;
input  [31:0] m_axi_C_RDATA;
input   m_axi_C_RLAST;
input  [0:0] m_axi_C_RID;
input  [8:0] m_axi_C_RFIFONUM;
input  [0:0] m_axi_C_RUSER;
input  [1:0] m_axi_C_RRESP;
input   m_axi_C_BVALID;
output   m_axi_C_BREADY;
input  [1:0] m_axi_C_BRESP;
input  [0:0] m_axi_C_BID;
input  [0:0] m_axi_C_BUSER;
input  [15:0] mul_ln97;
output  [3:0] Cv_address0;
output   Cv_ce0;
input  [15:0] Cv_q0;
input  [7:0] RM;
input  [7:0] zext_ln89;
input  [61:0] empty_25;
input  [61:0] empty_26;
input  [61:0] empty;
input  [63:0] C_offset;

reg ap_idle;
reg m_axi_C_AWVALID;
reg m_axi_C_WVALID;
reg m_axi_C_BREADY;
reg Cv_ce0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_enable_reg_pp0_iter13;
reg    ap_idle_pp0;
reg   [0:0] or_ln87_reg_438;
reg   [0:0] or_ln87_reg_438_pp0_iter6_reg;
reg    ap_block_state8_io;
reg   [0:0] icmp_ln89_1_reg_452;
reg   [0:0] icmp_ln89_1_reg_452_pp0_iter12_reg;
reg    ap_block_state14_pp0_stage0_iter13;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln87_fu_221_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    C_blk_n_B;
wire    ap_block_pp0_stage0;
reg    C_blk_n_W;
reg    C_blk_n_AW;
reg    ap_block_pp0_stage0_11001;
wire   [31:0] zext_ln89_cast_fu_199_p1;
reg   [31:0] zext_ln89_cast_reg_429;
reg   [0:0] icmp_ln87_reg_434;
wire   [0:0] or_ln87_fu_251_p2;
reg   [0:0] or_ln87_reg_438_pp0_iter1_reg;
reg   [0:0] or_ln87_reg_438_pp0_iter2_reg;
reg   [0:0] or_ln87_reg_438_pp0_iter3_reg;
reg   [0:0] or_ln87_reg_438_pp0_iter4_reg;
reg   [0:0] or_ln87_reg_438_pp0_iter5_reg;
wire  signed [61:0] add_ln87_fu_281_p2;
reg  signed [61:0] add_ln87_reg_442;
wire   [3:0] add_ln91_fu_309_p2;
reg   [3:0] add_ln91_reg_447;
reg   [3:0] add_ln91_reg_447_pp0_iter1_reg;
reg   [3:0] add_ln91_reg_447_pp0_iter2_reg;
reg   [3:0] add_ln91_reg_447_pp0_iter3_reg;
reg   [3:0] add_ln91_reg_447_pp0_iter4_reg;
wire   [0:0] icmp_ln89_1_fu_321_p2;
reg   [0:0] icmp_ln89_1_reg_452_pp0_iter1_reg;
reg   [0:0] icmp_ln89_1_reg_452_pp0_iter2_reg;
reg   [0:0] icmp_ln89_1_reg_452_pp0_iter3_reg;
reg   [0:0] icmp_ln89_1_reg_452_pp0_iter4_reg;
reg   [0:0] icmp_ln89_1_reg_452_pp0_iter5_reg;
reg   [0:0] icmp_ln89_1_reg_452_pp0_iter6_reg;
reg   [0:0] icmp_ln89_1_reg_452_pp0_iter7_reg;
reg   [0:0] icmp_ln89_1_reg_452_pp0_iter8_reg;
reg   [0:0] icmp_ln89_1_reg_452_pp0_iter9_reg;
reg   [0:0] icmp_ln89_1_reg_452_pp0_iter10_reg;
reg   [0:0] icmp_ln89_1_reg_452_pp0_iter11_reg;
wire   [61:0] grp_fu_195_p2;
reg   [61:0] mul_ln87_reg_456;
reg   [61:0] sext_ln89_mid2_v_reg_466;
wire   [31:0] grp_fu_191_p1;
reg   [31:0] conv59_i_reg_476;
reg   [0:0] ap_phi_mux_first_iter_1_phi_fu_183_p4;
wire    ap_loop_init;
wire   [63:0] zext_ln91_fu_342_p1;
wire  signed [63:0] sext_ln87_fu_373_p1;
reg    ap_block_pp0_stage0_01001;
reg   [7:0] i_fu_94;
wire   [7:0] i_1_fu_315_p2;
reg   [7:0] ap_sig_allocacmp_i_load;
reg   [7:0] j_fu_98;
wire   [7:0] select_ln87_1_fu_265_p3;
reg   [7:0] ap_sig_allocacmp_j_load;
reg   [15:0] indvar_flatten15_fu_102;
wire   [15:0] add_ln87_3_fu_227_p2;
reg   [15:0] ap_sig_allocacmp_indvar_flatten15_load;
wire   [0:0] icmp_ln89_fu_245_p2;
wire   [7:0] j_2_fu_239_p2;
wire   [61:0] zext_ln87_fu_277_p1;
wire   [1:0] trunc_ln87_fu_273_p1;
wire   [3:0] tmp_3_fu_291_p3;
wire   [3:0] trunc_ln91_fu_287_p1;
wire   [7:0] select_ln87_fu_257_p3;
wire   [3:0] sub_ln91_fu_299_p2;
wire   [3:0] trunc_ln91_1_fu_305_p1;
wire   [61:0] add_ln87_1_fu_346_p2;
wire   [63:0] sext_ln89_mid2_v_v_v_v_fu_350_p3;
wire   [63:0] add_ln87_2_fu_358_p2;
reg    grp_fu_191_ce;
reg    grp_fu_195_ce;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg    ap_loop_exit_ready_pp0_iter7_reg;
reg    ap_loop_exit_ready_pp0_iter8_reg;
reg    ap_loop_exit_ready_pp0_iter9_reg;
reg    ap_loop_exit_ready_pp0_iter10_reg;
reg    ap_loop_exit_ready_pp0_iter11_reg;
reg    ap_loop_exit_ready_pp0_iter12_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_500;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_enable_reg_pp0_iter13 = 1'b0;
#0 i_fu_94 = 8'd0;
#0 j_fu_98 = 8'd0;
#0 indvar_flatten15_fu_102 = 16'd0;
#0 ap_done_reg = 1'b0;
end

sgemm_hptosp_16ns_32_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
hptosp_16ns_32_2_no_dsp_1_U39(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(Cv_q0),
    .ce(grp_fu_191_ce),
    .dout(grp_fu_191_p1)
);

sgemm_mul_62s_62s_62_5_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 62 ),
    .din1_WIDTH( 62 ),
    .dout_WIDTH( 62 ))
mul_62s_62s_62_5_1_U40(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(add_ln87_reg_442),
    .din1(empty_26),
    .ce(grp_fu_195_ce),
    .dout(grp_fu_195_p2)
);

sgemm_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter12_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln87_fu_221_p2 == 1'd0))) begin
            i_fu_94 <= i_1_fu_315_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_94 <= 8'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln87_fu_221_p2 == 1'd0))) begin
            indvar_flatten15_fu_102 <= add_ln87_3_fu_227_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten15_fu_102 <= 16'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln87_fu_221_p2 == 1'd0))) begin
            j_fu_98 <= select_ln87_1_fu_265_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            j_fu_98 <= 8'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln87_reg_442 <= add_ln87_fu_281_p2;
        add_ln91_reg_447 <= add_ln91_fu_309_p2;
        add_ln91_reg_447_pp0_iter1_reg <= add_ln91_reg_447;
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        icmp_ln87_reg_434 <= icmp_ln87_fu_221_p2;
        icmp_ln89_1_reg_452 <= icmp_ln89_1_fu_321_p2;
        icmp_ln89_1_reg_452_pp0_iter1_reg <= icmp_ln89_1_reg_452;
        or_ln87_reg_438 <= or_ln87_fu_251_p2;
        or_ln87_reg_438_pp0_iter1_reg <= or_ln87_reg_438;
        zext_ln89_cast_reg_429[7 : 0] <= zext_ln89_cast_fu_199_p1[7 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        add_ln91_reg_447_pp0_iter2_reg <= add_ln91_reg_447_pp0_iter1_reg;
        add_ln91_reg_447_pp0_iter3_reg <= add_ln91_reg_447_pp0_iter2_reg;
        add_ln91_reg_447_pp0_iter4_reg <= add_ln91_reg_447_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
        ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
        ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
        ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
        ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
        conv59_i_reg_476 <= grp_fu_191_p1;
        icmp_ln89_1_reg_452_pp0_iter10_reg <= icmp_ln89_1_reg_452_pp0_iter9_reg;
        icmp_ln89_1_reg_452_pp0_iter11_reg <= icmp_ln89_1_reg_452_pp0_iter10_reg;
        icmp_ln89_1_reg_452_pp0_iter12_reg <= icmp_ln89_1_reg_452_pp0_iter11_reg;
        icmp_ln89_1_reg_452_pp0_iter2_reg <= icmp_ln89_1_reg_452_pp0_iter1_reg;
        icmp_ln89_1_reg_452_pp0_iter3_reg <= icmp_ln89_1_reg_452_pp0_iter2_reg;
        icmp_ln89_1_reg_452_pp0_iter4_reg <= icmp_ln89_1_reg_452_pp0_iter3_reg;
        icmp_ln89_1_reg_452_pp0_iter5_reg <= icmp_ln89_1_reg_452_pp0_iter4_reg;
        icmp_ln89_1_reg_452_pp0_iter6_reg <= icmp_ln89_1_reg_452_pp0_iter5_reg;
        icmp_ln89_1_reg_452_pp0_iter7_reg <= icmp_ln89_1_reg_452_pp0_iter6_reg;
        icmp_ln89_1_reg_452_pp0_iter8_reg <= icmp_ln89_1_reg_452_pp0_iter7_reg;
        icmp_ln89_1_reg_452_pp0_iter9_reg <= icmp_ln89_1_reg_452_pp0_iter8_reg;
        mul_ln87_reg_456 <= grp_fu_195_p2;
        or_ln87_reg_438_pp0_iter2_reg <= or_ln87_reg_438_pp0_iter1_reg;
        or_ln87_reg_438_pp0_iter3_reg <= or_ln87_reg_438_pp0_iter2_reg;
        or_ln87_reg_438_pp0_iter4_reg <= or_ln87_reg_438_pp0_iter3_reg;
        or_ln87_reg_438_pp0_iter5_reg <= or_ln87_reg_438_pp0_iter4_reg;
        or_ln87_reg_438_pp0_iter6_reg <= or_ln87_reg_438_pp0_iter5_reg;
        sext_ln89_mid2_v_reg_466 <= {{add_ln87_2_fu_358_p2[63:2]}};
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter7 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (or_ln87_reg_438_pp0_iter6_reg == 1'd1))) begin
        C_blk_n_AW = m_axi_C_AWREADY;
    end else begin
        C_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter13 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (icmp_ln89_1_reg_452_pp0_iter12_reg == 1'd1))) begin
        C_blk_n_B = m_axi_C_BVALID;
    end else begin
        C_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter8 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        C_blk_n_W = m_axi_C_WREADY;
    end else begin
        C_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        Cv_ce0 = 1'b1;
    end else begin
        Cv_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln87_fu_221_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter12_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        if ((ap_loop_init == 1'b1)) begin
            ap_phi_mux_first_iter_1_phi_fu_183_p4 = 1'd1;
        end else if ((1'b1 == ap_condition_500)) begin
            ap_phi_mux_first_iter_1_phi_fu_183_p4 = 1'd0;
        end else begin
            ap_phi_mux_first_iter_1_phi_fu_183_p4 = 1'd1;
        end
    end else begin
        ap_phi_mux_first_iter_1_phi_fu_183_p4 = 1'd1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_i_load = 8'd0;
    end else begin
        ap_sig_allocacmp_i_load = i_fu_94;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten15_load = 16'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten15_load = indvar_flatten15_fu_102;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_j_load = 8'd0;
    end else begin
        ap_sig_allocacmp_j_load = j_fu_98;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_191_ce = 1'b1;
    end else begin
        grp_fu_191_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_195_ce = 1'b1;
    end else begin
        grp_fu_195_ce = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter7 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (or_ln87_reg_438_pp0_iter6_reg == 1'd1))) begin
        m_axi_C_AWVALID = 1'b1;
    end else begin
        m_axi_C_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter13 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln89_1_reg_452_pp0_iter12_reg == 1'd1))) begin
        m_axi_C_BREADY = 1'b1;
    end else begin
        m_axi_C_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter8 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        m_axi_C_WVALID = 1'b1;
    end else begin
        m_axi_C_WVALID = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Cv_address0 = zext_ln91_fu_342_p1;

assign add_ln87_1_fu_346_p2 = (mul_ln87_reg_456 + empty);

assign add_ln87_2_fu_358_p2 = (sext_ln89_mid2_v_v_v_v_fu_350_p3 + C_offset);

assign add_ln87_3_fu_227_p2 = (ap_sig_allocacmp_indvar_flatten15_load + 16'd1);

assign add_ln87_fu_281_p2 = (zext_ln87_fu_277_p1 + empty_25);

assign add_ln91_fu_309_p2 = (sub_ln91_fu_299_p2 + trunc_ln91_1_fu_305_p1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_enable_reg_pp0_iter13 == 1'b1) & (1'b1 == ap_block_state14_pp0_stage0_iter13));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter13 == 1'b1) & (1'b1 == ap_block_state14_pp0_stage0_iter13)) | ((m_axi_C_WREADY == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b1)) | ((ap_enable_reg_pp0_iter7 == 1'b1) & (1'b1 == ap_block_state8_io)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter13 == 1'b1) & (1'b1 == ap_block_state14_pp0_stage0_iter13)) | ((m_axi_C_WREADY == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b1)) | ((ap_enable_reg_pp0_iter7 == 1'b1) & (1'b1 == ap_block_state8_io)));
end

always @ (*) begin
    ap_block_state14_pp0_stage0_iter13 = ((icmp_ln89_1_reg_452_pp0_iter12_reg == 1'd1) & (m_axi_C_BVALID == 1'b0));
end

always @ (*) begin
    ap_block_state8_io = ((m_axi_C_AWREADY == 1'b0) & (or_ln87_reg_438_pp0_iter6_reg == 1'd1));
end

always @ (*) begin
    ap_condition_500 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln87_reg_434 == 1'd0) & (1'b0 == ap_block_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign i_1_fu_315_p2 = (select_ln87_fu_257_p3 + 8'd1);

assign icmp_ln87_fu_221_p2 = ((ap_sig_allocacmp_indvar_flatten15_load == mul_ln97) ? 1'b1 : 1'b0);

assign icmp_ln89_1_fu_321_p2 = ((i_1_fu_315_p2 == RM) ? 1'b1 : 1'b0);

assign icmp_ln89_fu_245_p2 = ((ap_sig_allocacmp_i_load == RM) ? 1'b1 : 1'b0);

assign j_2_fu_239_p2 = (ap_sig_allocacmp_j_load + 8'd1);

assign m_axi_C_ARADDR = 64'd0;

assign m_axi_C_ARBURST = 2'd0;

assign m_axi_C_ARCACHE = 4'd0;

assign m_axi_C_ARID = 1'd0;

assign m_axi_C_ARLEN = 32'd0;

assign m_axi_C_ARLOCK = 2'd0;

assign m_axi_C_ARPROT = 3'd0;

assign m_axi_C_ARQOS = 4'd0;

assign m_axi_C_ARREGION = 4'd0;

assign m_axi_C_ARSIZE = 3'd0;

assign m_axi_C_ARUSER = 1'd0;

assign m_axi_C_ARVALID = 1'b0;

assign m_axi_C_AWADDR = sext_ln87_fu_373_p1;

assign m_axi_C_AWBURST = 2'd0;

assign m_axi_C_AWCACHE = 4'd0;

assign m_axi_C_AWID = 1'd0;

assign m_axi_C_AWLEN = zext_ln89_cast_reg_429;

assign m_axi_C_AWLOCK = 2'd0;

assign m_axi_C_AWPROT = 3'd0;

assign m_axi_C_AWQOS = 4'd0;

assign m_axi_C_AWREGION = 4'd0;

assign m_axi_C_AWSIZE = 3'd0;

assign m_axi_C_AWUSER = 1'd0;

assign m_axi_C_RREADY = 1'b0;

assign m_axi_C_WDATA = conv59_i_reg_476;

assign m_axi_C_WID = 1'd0;

assign m_axi_C_WLAST = 1'b0;

assign m_axi_C_WSTRB = 4'd15;

assign m_axi_C_WUSER = 1'd0;

assign or_ln87_fu_251_p2 = (icmp_ln89_fu_245_p2 | ap_phi_mux_first_iter_1_phi_fu_183_p4);

assign select_ln87_1_fu_265_p3 = ((icmp_ln89_fu_245_p2[0:0] == 1'b1) ? j_2_fu_239_p2 : ap_sig_allocacmp_j_load);

assign select_ln87_fu_257_p3 = ((icmp_ln89_fu_245_p2[0:0] == 1'b1) ? 8'd0 : ap_sig_allocacmp_i_load);

assign sext_ln87_fu_373_p1 = $signed(sext_ln89_mid2_v_reg_466);

assign sext_ln89_mid2_v_v_v_v_fu_350_p3 = {{add_ln87_1_fu_346_p2}, {2'd0}};

assign sub_ln91_fu_299_p2 = (tmp_3_fu_291_p3 - trunc_ln91_fu_287_p1);

assign tmp_3_fu_291_p3 = {{trunc_ln87_fu_273_p1}, {2'd0}};

assign trunc_ln87_fu_273_p1 = select_ln87_1_fu_265_p3[1:0];

assign trunc_ln91_1_fu_305_p1 = select_ln87_fu_257_p3[3:0];

assign trunc_ln91_fu_287_p1 = select_ln87_1_fu_265_p3[3:0];

assign zext_ln87_fu_277_p1 = select_ln87_1_fu_265_p3;

assign zext_ln89_cast_fu_199_p1 = zext_ln89;

assign zext_ln91_fu_342_p1 = add_ln91_reg_447_pp0_iter4_reg;

always @ (posedge ap_clk) begin
    zext_ln89_cast_reg_429[31:8] <= 24'b000000000000000000000000;
end

endmodule //sgemm_sgemm_Pipeline_VITIS_LOOP_87_2_VITIS_LOOP_89_3
